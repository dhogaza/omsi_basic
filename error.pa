/ERROR PROCESSOR
	*.+200&7400	/MUST START ON RECORD BOUNDRY


/LOADED INTO PGS. 4600, 5000, 5200, 5400, 5600

	REL=.-4600

XER,	ISZ ECNT
	TAD (ELIST-REL
	DCA PNTR
ESKP,	SKP
XER0,	ISZ PNTR
	TAD I PNTR	/SEARCH FOR TEXT
	ISZ PNTR
ESNA,	SNA
	JMP UNER
	TAD XERROR
	SZA CLA
	JMP XER0
UNER,	TAD I PNTR
	SMA
	JMP I (TLER-REL	/3 LINE ERROR MESSAGE
	JMS PRI		/PRINT ERROR MESSAGE
	TAD PNTR
	DCA T1		/IN CASE OF NON-FATAL ERROR
	TAD BOTTOM
	SNA CLA
	JMP ER1
	TAD (INL-REL
	JMS PRI		/"IN LINE"
	TAD BOTTOM
	JMS PLINE
ER1,	CDF 10
	TAD I (12
	CDF
	SMA CLA
	JMP NCHN
	TAD (INF-REL
	JMS PRI		/PRINT " - FILENAM"
	CDF 10
	TAD (7
	JMS PRI
	CDF
NCHN,	TAD [215
	TYPE
	ISZ T1
	TAD I T1
	DCA XERROR	/RETURN ADDR OF
	CDF 10
	TAD I (5
	CDF
	TAD (52		/?????
	DCA RETBLK
	JMP ERET	/READ 3 PAGES BACK IN AND CONTINUE

PLINE,	0		/PRINT DECIMAL LINE NUMBER
	DCA PRI2
	TAD ESNA
	DCA XPSW	/INITIALIZE SWITCH
	TAD (XDIV-REL-1
	DCA XR1		/POINTER TO POWERS OF TEN
XPL1,	TAD I XR1
	SMA
	JMP I PLINE		/LIST ENDED WITH NEGATIVE NUMBER
	DCA PRI
	DCA TEMP
	TAD PRI2
	CLL
	TAD PRI		/DIVIDE BY A POWER OF TEN
	SNL
	JMP .+3
	ISZ TEMP	/ADD ONE TO QUOTIENT
	JMP .-5		/CONTINUE
	CIA
	TAD PRI
	CIA
	DCA PRI2
	TAD TEMP
XPSW,	HLT		/EITHER SKP OR SNA
XPSW2,	JMP XPL1	/IF LEADING ZERO,EITHER IGNORE OR TYPE SPACE
	TAD (260	/MAKE ASCII CODE FOR DIGIT
	TYPE			/AND TYPE IT
	TAD ESKP
	DCA XPSW	/SINCE THIS WAS A DIGIT,NEXT ZERO IS NOT
	JMP XPL1	/LEADING.

XPL11,	TAD [240
	TYPE		/A LEADING SPACE
	JMP XPL1

PRI,	0		/MESSAGE PRINTOUT
	DCA PNTR
	DCA TYPOFF	/MAKE IT ECHO
PRI1,	TAD I PNTR	/GET FIRST TWO LETTERS
	RTR CLL
	RTR
	RTR
	JMS PRI2	/PRINT FIRST LETTER
	TAD I PNTR	/AND SECOND LETTER
	JMS PRI2
	ISZ PNTR
	JMP PRI1	/CONTINUE UNTIL ZERO CHAR

PRI2,	0		/TYPE OUT ONE 6 BIT CHAR
	AND (77
	SNA
	JMP I PRI	/DONE
	TAD (-37
	SPA
	TAD (337-237
	TAD (237	/ADJUST ASCII
	TYPE
	JMP I PRI2

INL,    TEXT / AT LINE /
INF,    TEXT / - /

	PAGE
TLER,	DCA XR3
	TAD [215
	TYPE
	JMS I LCLEN
	/GIVE 3 LINES OF ERROR
	TAD BOTTOM
	FINDLN
	JMP XE1
	WIPE		/DELETE LINE
	TAD LXPL11
	DCA I LXPSW2
	TAD BOTTOM
	JMS I LPLINE		/PRINT LINE NUMBER
	TAD LXPL1
	DCA I LXPSW2
	TAD [240
	ISZ UNWD	/UNDO WHAT WIPE HATH DONE
	ISZ UNWD
	TYPE		/SEPARATE LINE # AND TEXT WITH A SPACE
LIN1,	UNPACK
	ZORCH
	JMP LIN2	/CR MEANS END OF LINE
	TYPE
	JMP LIN1
LIN2,	TAD [215	/ECHO CR
	TYPE
	TAD L4
	TAD RSW
	CIA
	DCA RSW		/NUMBER OF SPACES OVER
	TAD [240
	TYPE		/SPACE OVER TO ERROR
	ISZ RSW
	JMP .-3
	TAD LUP
	TYPE		/TYPE '^
	TAD [215	/PRINT ERROR MESSAGE ON NEXT LINE
	TYPE
XE1,	CLA STL RAR
	TAD XR3
	JMS I LPRI		/PRINT ERROR MESSAGE
	TAD PNTR
	DCA T1
	JMP I LER1

LXPL11,	XPL11-REL&177+5200
LXPSW2,	XPSW2-REL
LPLINE,	PLINE-REL
LXPL1,	XPL1-REL&177+5200
L4,	4
LUP,	"^
LPRI,	PRI-REL
LER1,	ER1-REL
LCLEN,	CLEN
XDIV,	6030		/POWERS OF 10
	7634
	7766
	7777
	0000

ELIST,	-VRTERR-1;	QVRTER-REL&3777
	-DATERR-1;	QDATER-REL
	-DUPDIM-1;	QTWICE-REL&3777
	-DIMERR-1;	QDIMER-REL&3777
	-FILBIG-1;	QDIMNM-REL&3777
	-TMANY-1;	QBIGDIM-REL
	-BADLN-1;	QBADLN-REL&3777
	-NOEND-1;	QNOEND-REL
	-OFULL-1;	QOFULL-REL
	-IVAR2-1;	QIVAR2-REL&3777
	-MRP-1;		QARERR-REL&3777
	-ARERR-1;	QARERR-REL&3777
	-BSUBS-1;	QSUBS-REL&3777
	-LITERR-1;	QLITERR-REL
	-NODATA-1;	QNODATA-REL
	-ENL-1;		QENL-REL
	-UNDEF-1;	QUND-REL
	-NER-1;		QNER-REL
	-ILITER-1;	QILIT-REL&3777
	-NBAS-1;	QNBAS-REL&3777
	-FWN-1;		QFORERR-REL
	-ERP-1;		QERP-REL&3777
	-ERP1-1;	QERP-REL&3777
	-MEQ-1;		QMEQ-REL&3777
	-MC-1;		QMC-REL&3777
	-ERP2-1;	QERP-REL&3777
	-CASE-1;	QCASE-REL&3777
	-EOP-1;		QEOP-REL&3777
	-MOP-1;		QMOP-REL&3777
	-MVAR-1;	QMVAR-REL&3777
	-ELP-1;		QELP-REL&3777
	-MLP-1;         QMLP-REL&3777
	-ILFORM-1;	QMLP-REL&3777
	-ISC-1;		QISC-REL&3777
	-IFU-1;		QIFU-REL&3777
	-ELP1-1;	QELP-REL&3777
	-MME-1;		QMME-REL&3777
	-MOP1-1;	QMOP-REL&3777
	-MQU-1;		QMQU-REL&3777
	-CRS-1;		QSUBS-REL&3777
	-ISV-1;		QISV-REL&3777
	-MME1-1;	QMME-REL&3777
	-MAS-1;		QMAS-REL&3777
	-MEQ2-1;	QMEQ-REL&3777
	-ERP3-1;	QERP-REL&3777
	0;		QUNER-REL&3777
EEND=.

/	ERROR MESSAGE				RECOVERY ADDR
QDATER,	TEXT	/TOO MUCH DATA/
QDIMNM,	TEXT	/FILE TOO LARGE/;	FLBIG2
QDIMER,	TEXT	/MISSING ','/;		CEND2
QBADLN,	TEXT /ILLEGAL INTEGER/;			BADLN+1
QNOEND,	TEXT /NO 'END' STATEMENT/;		NOEND+1
QOFULL,	TEXT /PROGRAM TOO LONG/;	CSTOP3
QIVAR2,	TEXT /ILLEGAL VARIABLE/;	ARERR+1
QARERR,	TEXT /ILLEGAL SYNTAX/;			ARERR+1
QSUBS,	TEXT /ILLEGAL SUBSCRIPTING/;		CEND2
QBIGDIM,TEXT /TOO MANY ARRAYS/;			CSTOP3
QTWICE,	TEXT /VARIABLE DIMENSIONED TWICE/;	CEND2
QLITERR,TEXT /TOO MANY LITERALS/;		CSTOP3
QNODATA,TEXT /'READ' WITHOUT 'DATA'/;		NODATA+1
QENL,	TEXT /'END' NOT LAST/;			ENL+1
QUND,	TEXT /UNDEFINED LINE NUMBER/;		QGO
QNER,	TEXT /'NEXT' WITHOUT 'FOR'/;	NER+1
QILIT,	TEXT /ILLEGAL CONSTANT/;		CEND2
QNBAS,	TEXT /NON-BASIC STATEMENT/;		CEND2
QFORER,	TEXT /'FOR' WITHOUT 'NEXT'/;	FWN+1
QERP,	TEXT /EXTRA ')'/;	ARERR+1
QMEQ,	TEXT /MISSING '='/;	ARERR+1
QMC,	TEXT /MISPLACED ',' OR ';'/;	ARERR+1
QCASE,	TEXT /CHARACTERS AFTER STATEMENT END/;	ARERR+1
QEOP,	TEXT /EXTRA OPERATOR/;	ARERR+1
QMOP,	TEXT /MISSING OPERATOR/;	ARERR+1
QMVAR,	TEXT /MISSING VARIABLE/;	ARERR+1
QELP,	TEXT /EXTRA '('/;	ARERR+1
QMLP,	TEXT /MISSING '('/;	ARERR+1
QISC,	TEXT /INCONSISTENT SUBSCRIPTING/;	ARERR+1
QIFU,	TEXT /ILLEGAL USE OF FUNCTION/;	ARERR+1
QMME,	TEXT /MIXED MODE EXPRESSION/;	ARERR+1
QMQU,	TEXT /MISSING QUOTE/;	ARERR+1
QISV,	TEXT /ILLEGAL STRING VARIABLE/;	ARERR+1
QMAS,	TEXT /ILLEGAL ASSIGNMENT/;	ARERR+1
QUNER,	TEXT /COMPILER ERROR/;	CSTOP3

	IFZERO .-1-7600&7600 <ERRORS,	ZZZXXX
 TOO,	ZZZXXX
 LONG,	ZZZXXX
>

	$

