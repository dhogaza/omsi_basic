/COMPILE FOR PS/8 BASIC


/COPYRIGHT 1972 BY THE OREGON MUSEUM OF SCIENCE AND INDUSTRY
/***** DON BACCUS AND GERD HOEREN, AUTHORS *****
/ALL RIGHTS RESERVED



/PAGE ZERO

	FIELD 0

BUFBEG=22
	*10
XR1,	0
XR2,	0
XR3,	0
DATAPT,	7244	/POINTER FOR DATA STATEMENT
XR4,	0
IFSWCH,	0		/FOR MID & RND ACCESS STRINGS
QSW,	0		/FOR DATA
D1,	0		/DATA TEMP

	*20
UNSV,	0
MAXLOC,	-7644		/RESET TO -7244 BY DATA
QLEN,	0
QPASS2,	-PASS2
DIMSW,	0
PACKSV,	0	/PNTR TO LENGTH OF COMPILED LINE
PACKWD, 0
PNTR2,	0
UNWD,	0	/FOR UNPACK
RFULL,	0
BOTTOM,	0
INHNDL,	0	/ENTRY OF DEVICE HANDLER
TAL,	0	/PRINT
CHAR,	0	/CHARACTER BUFFER
C1,	0
LARGE,	0	/NEXT LARGEST LINE FROM FINDLN
LINE,	0
M1,	0	/TEMP STORAGE
T2,	0
HFSAVE,	0
RSW,	0
PROTECT,0
TEMP,	0	/SORT
T1,	0
PNTR,	0	/SORT & PRINT
WARSAW,	7400
WSAVE,	0
VARSW,	0
PRIOR,	0
DOWN,	0
SYMPTR,	SYMTAB	/POINTER TO SYMBOL TABLE
XSTC11,	0
TMP1,	0
TMP3,	0
TMP2,	0
ETMP1,	0
ETMP2,	0
ETMP3,	0
	AC1=EXP
	AC2=HORD
	AC3=LORD
EXP,	0
HORD,	0
LORD,	0
OVER,	0
LITP,	LITBUF+3
LS,	0		/USED BY LSEARCH
LSNUM,	0		/SAME
OUDEV,	TTY
ECNT,	0	/ERROR COUNTER
CURRNT,	0
	0
WORDS,	0
IFSW,	0	/NON-ZERO FOR IF, FOR, ON GOTO
FORCNT,	0	/COUNTER FOR 'FOR' NESTING
MODE,	0
DIMFSW,	0

TYPE=JMS I .
ZOD,	XTYPE

FINDLN=JMS I .
	XFIN

PUSH=JMS I .
	XPUSH

POP=JMS I .
	XPOP

PUSHJ=JMS I .
	XPUSHJ

POPJ=JMP I .
	XPOPJ

NUMBCK=JMS I .
	XNUMB

WIPE=JMS I .
	XWIPE

READ=JMS I .
	CINPUT

STOLN=JMS I .
	XSTOLN

RTL6=JMS I .
	XRTL6

DEC=JMS I .
	XDEC

SORT=JMS I .
	XSORT

PACK=JMS I .
	PACK0

UNPACK=JMS I .
	UNPAC0

ZORCH=JMS I .
	XCRCHK

UPPER=JMS I .
	XUPPER

KILL=JMS I .
	XKILL

ERROR=JMS I .
	XERROR

STORE=JMS I .
XDSTORE,XSTORE

	PAGE
	JMP CSTOP2	/GO TO EDIT, DO NOT PASS GO, DO NOT RUN

	FUNCS=24
FUNLST,	"S&77^100+"Q-300^7777
	-"R;FTYP1
	"I&77^100+"N-300^7777
	-"T;FTYP1
	"S&77^100+"I-300^7777
	-"N;FTYP1
	"C&77^100+"O-300^7777
	-"S;FTYP1
	"T&77^100+"A-300^7777
	-"N;FTYP1
	"A&77^100+"B-300^7777
	-"S;FTYP1
	"R&77^100+"N-300^7777
	-"D;FTYP1
	"E&77^100+"X-300^7777
	-"P;FTYP1
	"L&77^100+"O-300^7777
	-"G;FTYP1
	"S&77^100+"G-300^7777
	-"N;FTYP1
	"A&77^100+"T-300^7777
	-"N;FTYP1
	"C&77^100+"H-300^7777
	-"R;FTYP2
	"P&77^100+"I-300^7777
	0;FRET1
	"L&77^100+"E-300^7777
	-"N;FTYP3
	"T&77^100+"A-300^7777
	-"B;FTYP1
	"P&77^100+"O-300^7777
	-"S;FTYP1
	"A&77^100+"S-300^7777
	-"C;ASCII
	"M&77^100+"I-300^7777
	-"D;MID

	*271
CSTOP3,			/JUMP HERE WITH ECNT NOT ZERO TO GO BACK TO EDIT
RUN,	CDF 10
	TAD ECNT
	SZA CLA
	JMP CSTOP2-1	/ERRORS - GO BACK TO EDIT
	TAD I (4
	IAC
	SNA CLA
	JMP CSTOP2	/COMPILE
	TAD (3500
	DCA SC1-2
	TAD (61
	JMP .+5
	TAD PACKWD
	DCA I (20	/DON'T CSAVE - ERRORS
CSTOP2,	CDF 10
	DCA I SC1-1
	TAD I (5
	IAC
	DCA SC1
	CDF
	JMS I INHNDL
	3200		/READ 31 PAGES
	0		/INTO 0
SC1,	0		/BLOCK
	HLT		/MUST BE LOC #321!
	//////		/EDITOR SHOULD BE IN CORE ON RETURN

        IFDEF DEBUG <
	LAS
	SMA CLA         /CHECK SW 0
	HLT		/ALLOW ENTRY INTO ODT IF ON>

	CDF 10		/ENTRY OF COMPILE (COMPILE_EDIT)
	TAD I (3
	DCA INHNDL
	TAD INHNDL
	AND [7600
	DCA WARSAW
	TAD I (2
	DCA PACKWD
	CDF
	TAD OUJMPE
	DCA OUJMP
	JMP COMPL

	PAGE
XERROR,	0
	CLA
	CDF 10
	TAD I (5
	CDF
	TAD (56
	DCA EBLK
	JMS I INHNDL
	500
	4600
EBLK,	0
	HLT
	JMP I (XER-REL

ERET,	JMS I INHNDL
	600
	4400
RETBLK,	0
	HLT
	JMP I XERROR

XWIPE,	0		/DELETE LINE
	CMA CLL RAL CLA
	TAD UNWD	/BACKUP POINTER BY TWO
	DCA UNWD
	CDF 10
	DCA I UNWD	/LINE IS NOT REALLY GONE,
	CDF		/JUST FAKED OUT.
	JMP I XWIPE	/DONE

XNUMB,	0		/CHECK FOR NUMBER
	SNA
	READ
	DCA T1
	TAD T1
	TAD [-260
	SPA CLA		/CHECK IF A DIGIT
	JMP EXIT0
	TAD T1
	TAD [-272
	SMA CLA
	JMP .+3
	ISZ XNUMB	/YES
	TAD [-260
EXIT0,	TAD T1
	JMP I XNUMB

XUPPER,	0		/CONVERT TO UPPER CASE
	DCA XWIPE
	TAD XWIPE
	CLL
	TAD [-300
	CLA		/CHECK IF LETTER
	TAD XWIPE
	SZL		/WAS IT A LETTER??
	AND (337	/YES, CONVERT IT
	DCA CHAR	/CONVERT STORED VERSION OF
	TAD CHAR	/THIS CHARACTER,ALSO
	JMP I XUPPER

XDEC,	0		/DECIMAL INPUT
	DCA LINE	/AC CAN CONTAIN FIRST DIGIT
	READ
	NUMBCK		/NUMBER??
	JMP OUT		/NO,WE'RE DONE
	DCA T1
	TAD LINE
	SPA		/MULTIPLY BY TEN
	JMP BADLN
	RTL CLL
	SNL		/THIS IS HARDER THAN IT SOUNDS!
	TAD LINE
	SNL		/NOTE THE REPETITION?
	RAL CLL
	SNL		/MAYBE I SHOULD MAKE THIS A SUBROUTINE
	TAD T1
	SNL
	JMP XDEC+1	/HE SURVIVED THE GAUNTLET
	JMP BADLN
OUT,	CLA
	TAD LINE
	SNA
	JMP BADLN	/ZERO IS AN ILLEGAL LINE NUMBER
	IAC		/AS IS -1
	SNA CLA
	JMP BADLN
	TAD LINE
	JMP I XDEC	/HE SURVIVED! EXIT WITH LINE

SPNOR,	0
	UNPACK
	ZORCH
	JMP BCKRSW
	ISZ RSW
BCKRS2,	TAD (-240
	SZA
	TAD (240-211
	SNA
	JMP SPNOR+1
	TAD (211
	JMP I SPNOR
STRING,	0
	UNPACK
	ZORCH
	JMP I STRING
	ISZ RSW
	TAD (-""
	SNA
	JMP STRO
	TAD (""
	PACK
	JMP STRING+1
STRO,	ISZ STRING
	JMP I STRING
BCKRSW,	CMA CLA
	TAD RSW
	DCA RSW
	TAD [215
	JMP BCKRS2
	PAGE
BADLN,	ERROR
	NOP		/FIX BADLN+2 ETC!!!
	STA
	TAD C1
	CIA
	TAD PACKWD
	DCA TEMP	/FIX GOTO 0 ETC.
	CDF 10
	DCA I TEMP	/MAKE INTO 'LET'
	CDF
	JMS CLEN	/COMPUTE LENGTH OF LINE
	JMP CEND2

PACK0,	0
	AND [377
	ISZ OUJMP
OUJMP,	HLT-1
	JMP OCHAR1
	JMP OCHAR2
	DCA CHAR3	/THIRD CHAR
	TAD CHAR3
	RTL CLL
	RTL
	AND [7400
	TAD CHAR1
	STORE
	TAD CHAR3
	RTL6
	RTL
	AND [7400
	TAD CHAR2
	STORE
OUJ,	TAD OUJMPE
	DCA OUJMP	/RESET TO FIRST WORD
	JMP I PACK0
OCHAR1,	DCA CHAR1	/FIRST CHARACTER
	TAD CHAR1
	SZA CLA
	JMP I PACK0
	TAD CHAR1	/ROUND ON NULL
	JMP OCH
OCHAR2,	DCA CHAR2	/SECOND CHAR
	TAD CHAR2
	SZA CLA
	JMP I PACK0
	TAD CHAR1
	STORE
	TAD CHAR2
OCH,	STORE
	JMP OUJ
OUJMPE,	JMP OUJMP
CHAR1,	0
CHAR2,	0
CHAR3,	0
	
UNPAC0,	0		/GENERAL 3/2 UNPACK ROUTINE
	CLA
	CDF 10		/SET FIELD
	JMP I ICHLV	/1ST,2ND,OR 3RD CHAR?

ICHAR1,	TAD I UNWD
	JMS ICHLV

	ISZ UNWD	/SECOND CHARACTER
	TAD I UNWD
	JMS ICHLV	/AND EXIT

	CMA CLA			/THIRD CHARACTER
	TAD UNWD
	DCA INFPTR
	TAD I INFPTR
	AND [7400
	DCA INFPTR	/GET TOP 4 BITS OF PREVIOUS WORD
	TAD I UNWD
	ISZ UNWD
	AND [7400	/BOTTOM 4 BITS OF 3RD CHAR
	CLL RTR; RTR
	TAD INFPTR	/ADD IN 4
	RTR;RTR
	JMS ICHLV
	JMP ICHAR1

ICHLV,	0
	AND [177
	SNA
	JMP I ICHLV
	TAD (200
	CDF
	JMP I UNPAC0

INFPTR,	0
	JMS RSTUFF	/INPUT LINE TEST COMES
	SKP		/HERE ON FAILURE
	JMS GCNB	/INPUT #
INPUT,	CLA CLL
IDMDE,	DCA MODE
	TAD IDMDE
	DCA DUMPSW
	PUSHJ
	POLISH
	JMP ARERR
	TAD (100
	TAD MODE
	DCA MODE
	JMS SWLDOP
	TAD MODE
ISTOR,	STORE
	TAD ISTOR
	DCA DUMPSW
	TAD CHAR
	ZORCH
	JMP CEND
	JMP INPUT

GCNB,	0
	CLA IAC
	DCA MODE
	PUSHJ; POLISH
ERP,	ERROR		/EXTRA '('
	NOP
	JMP I GCNB

	PAGE
KILLSW,	0

XKILL,	0		/SCRUNCH BUFFER-DELETE "DEAD" LINES
	TAD UNSV
	CIA
	TAD UNWD
	DCA TMP1
	TAD PACKWD
	CIA
	TAD PACKSV
	DCA PACKSV
	TAD [BUFBEG
	DCA UNWD
	DCA KILLSW
	TAD (BUFBEG-1
	DCA XR1		/SET THE TWO POINTERS TO FRONT OF BUFFER
	CDF 10		/TEXT IN FIELD 1
XKILL2,	TAD PACKWD	/CHECK FOR END OF BUFFER
	CIA CLL
	TAD UNWD
	SNL CLA
	JMP XKIL22
 	TAD KILLSW	/WERE THERE ANY DEAD LINES?
	SNA CLA
	ISZ XKILL	/NO,SKIP A LOCATION
	CDF
	TAD XR1
	IAC
	DCA PACKWD
	TAD PACKSV
	TAD PACKWD
	DCA PACKSV
	TAD UNSV
	TAD TMP1
	DCA UNWD
	JMP I XKILL	/AND EXIT
XKIL22,	TAD I UNWD	/CHECK LINE NUMBER
	SNA
	JMP XKILL3	/IF "DEAD" LINE, THEN SKIP OVER
	CIA
	TAD BOTTOM
	SNA CLA
	JMP XKIL23
XKIL24,	TAD I UNWD
	DCA I XR1
	ISZ UNWD	/STORE LINE NUMBER AND BUMP POINTER
	TAD I UNWD
	CIA		/WORD COUNT ON THIS LINE
	DCA M1
	TAD I UNWD
	ISZ UNWD	/RESTORE REST OF LINE
	DCA I XR1
	ISZ M1
	JMP .-4
	JMP XKILL2	/GET A NEW LINE
XKILL3,	ISZ UNWD	/BUMP OUR POINTER
	TAD I UNWD	/NUMBER OF WORDS IN THIS LINE
	TAD UNWD	/ADD POINTER
	DCA UNWD	/AND CALCULATE NEW POINTER
	ISZ KILLSW	/INDICATE THAT THERE WAS AT LEAST 1
	JMP XKILL2	/"DEAD" LINE IN THE BUFFER	

XKIL23,	TAD [3
	TAD XR1
	DCA UNSV
	JMP XKIL24
XTYPE,	0		/TYPE OUT SUBROUTINE
	TAD TYPOFF
	SPA
	JMP XTOUT
	JMS I OUDEV
	TAD [-215	/CR?
XTOUT,	SZA CLA
	JMP CHCK1	/NO,CHECK KEYBORED
	TAD [212	/YES,GO ECHO LF
	JMP XTYPE+1
CHCK1,	KSF
	JMP I XTYPE
	TAD (200
	KRS
	TAD (-203
	SNA
	JMP CSTOP2	/CONTROL C, ON SYSDEV WILL ALLOW EDIT TO BE READ IN
			/BEFORE STOPPING
	TAD (203-220
	SNA
	JMP CSTOP2
	IAC		/^O
	SZA CLA
	JMP I XTYPE	/NO - CONTINUE
	CLL CML RAR
	TAD TYPOFF
	DCA TYPOFF
	KCC
	JMP I XTYPE

LPT,	0
	6656		/LLS
	6651		/LSF
	JMP .-1
	JMP I LPT

TTY,	0
	TSF
	JMP .-1
	TLS
	JMP I TTY
TYPOFF,	0

OPG,	OPRATR
	OPRATR
	OPRATR
	OPRATR
	OPRATR
	ROP
	ROP
	ROP3
	ROP4
	LPAREN
	RPAREN
	CR
	COMNA
	COMNA
	LIT2
OPEND=.-4
	QUOTE

	PAGE
XSTOLN,	0		/STORE A LINE NUMBER
	CDF 10	
	DCA I PACKWD	/STORE IT
	ISZ PACKWD
	CDF
	TAD PACKWD	/NOW CALCULATE LENGTH
	DCA PACKSV
	ISZ PACKWD
	JMP I XSTOLN

XSORT,	0		/SORT AND BRANCH
	CIA
	DCA TEMP
	TAD I XSORT
	DCA PNTR	/POINTER TO FIRST LIST
	ISZ XSORT	/FOR RETURN
	TAD I PNTR
	SPA		/END OF LIST?
	JMP SEXIT	/YES - DIDN'T FIND MATCH
	TAD TEMP	/NO
	ISZ PNTR
	SZA CLA		/MATCH?
	JMP .-6		/NO, TRY NEXT ENTRY
	CMA		/MATCH FOUND
	TAD PNTR	/GET DIFFERENCE BETWEEN TWO LISTS
	TAD I XSORT	/FROM CALL
	DCA TEMP	/DO AN INDERECT INDIRECT
	TAD I TEMP	/GET LOCATION TO JMP TO
	DCA DOWN
	JMP I DOWN	/AND JMP T THERE

SEXIT,	ISZ XSORT	/NO MATCH - RET +3
	CLA CLL
	JMP I XSORT
XFIN,	0		/VERSION 222
	DCA T1		/AND HOPEFULLY LAST!
	TAD [BUFBEG	/START AT THE BEGINNING OF BUFFER
	DCA UNWD
	CMA
	DCA LARGE	/LARGEST LINE IS 7777
	CDF 10
XFINGO,	TAD PACKWD	/CHECK FOR END OF BUFFER
	CIA CLL
	TAD UNWD
	SZL CLA
	JMP FIN1	/YES, GET NEXT LARGEST LINE FOUND
	TAD I UNWD	/NO, GET LINE NUMBER
	CIA
	CLL
	SNA		/ZERO LINE NUMBER MEANS "DEAD" LINE
	JMP SKIP	/SKIP OVER IT
	TAD T1		/IS THIS THE LINE WE WANT?
	SNA
	JMP XFND	/YES, STOP
	SNL CLA		/NO, IS IT SMALLER?
	JMP LARG1	/NO, IT MIGHT BE THE NEXT LARGEST
SKIP,	ISZ UNWD		/YES, SKIP IT
	TAD I UNWD	/UNWD+LENGTH OF LINE = NEXT LINE NUMBER
	TAD UNWD
	DCA UNWD
	JMP XFINGO	/TRY NEXT NUMBER
XFND,	CDF		/LINE NUMBER
	TAD (ICHAR1	/FOUND - SET UNWD
	DCA I ICHLVV
	ISZ XFIN	/AND RETURN +2
	ISZ UNWD
	ISZ UNWD	/WE DON'T WANT TO UNPACK LINE LENGTH
	JMP I XFIN	/DONE
LARG1,	TAD I UNWD	/THISLN>LARGEST SO FAR?
	CIA
	STL
	TAD LARGE
	SZL SNA CLA
	JMP SKIP	/IT IS < OR = TO IT
	TAD I UNWD
	DCA LARGE
	TAD UNWD
	DCA M1		/SAVE UNWD IN CASE THIS ONE
	JMP SKIP	/IS THE NEXT LARGEST NUMBER
FIN1,	CDF		/RETURN FOR NEXT LARGEST
	TAD (ICHAR1	/SAME AS XFND,
	DCA I ICHLVV
	TAD LARGE	/JUST USE LARGE INSTEAD
	DCA T1
	CLA CLL CML RTL
	TAD M1		/ACTUALLY UNWD
	DCA UNWD
	ISZ LARGE	/IF LARGE=7777 THEN
	SKP
	JMP .+3		/NEXT LARGEST NOT FOUND
	CMA
	TAD LARGE
	JMP I XFIN	/RET AC=0 FOR END OF BUFFER
ICHLVV,	ICHLV

LET2,	JMS SWLDOP
	CLA CMA
	SKP
LET,	DCA MODE
	DCA LEQSW
	JMS SAVSTUFF
	JMS ALPHA
	SKP CLA
	JMP LET4
	DCA VARSW
	JMP LET3
LET4,	TAD CHAR
	PUSHJ
	GETVAR
	TAD CHAR
	TAD (-"=
	SNA CLA
	JMP LET2
	ISZ VARSW
LET3,	ISZ LEQSW
	JMP MEQ-1
	PUSHJ
	POLISH+4
ERP1,	ERROR		/EXTRA '('
MC,	ERROR		/MISPLACED ; OR ,
	JMP CEND

	JMS RSTUFF
MEQ,	ERROR		/MISSING '='

LEQSW,	0

	PAGE
IDENT,	0
	DCA CSAV3
	TAD I IDENT
	DCA XR1
	ISZ IDENT
	TAD I IDENT
	DCA PNTR
	ISZ IDENT
	DCA TAL
	DCA T2
	TAD RSW
	DCA HFSAVE
	DCA RSW
	TAD UNWD
	DCA CSAV1
	TAD INFPTR
	DCA XPOP	/SAVE MORE THINGS
	TAD I [ICHLV
	DCA CSAV2
	DCA CSW2
IGO,	TAD I PNTR
	RTL6
	RAL
	JMS ICHECK
	TAD I PNTR
	JMS ICHECK
	ISZ PNTR
	JMP IGO

ICHECK,	0
	JMS XPRI3
	JMP CIDENT
	DCA XR2
	ISZ CSW2
	TAD CSAV3
	SNA
	READ
	DCA CHAR
	CMA
	DCA CSW2
	TAD CHAR
	CIA
	TAD XR2
	SNA CLA
	JMP I ICHECK
	ISZ TAL
	ISZ XR1
	JMP .+5
	TAD HFSAVE		/GET BACK OLD CHARACTER COUNT
	TAD T2
	DCA RSW
	JMP I IDENT
	TAD RSW
	CIA
	TAD T2
	SMA CLA
	JMP .+3
	TAD RSW
	DCA T2
	DCA RSW		/RESET ERROR COUNTER
	TAD I PNTR
	ISZ PNTR
	AND [77
	SZA CLA
	JMP .-4
	TAD CSAV1	/RESET UNPACK POINTERS
	DCA UNWD
	TAD CSAV2
	DCA I [ICHLV
	TAD XPOP	/REPLACE UNPACK TEMP
	DCA INFPTR
	JMP IGO-1
CIDENT,	ISZ IDENT
	TAD HFSAVE
	TAD RSW
	DCA RSW
	TAD TAL
	JMP I IDENT
CSAV1,	0
CSAV2,	0
CSW2,	0
CSAV3,	0

CHAIN,	TAD [7600	/CHAIN A$, <LINE NUMBER>
	DCA DUMPSW
	CLL CML RAR
	DCA MODE
	PUSHJ; POLISH
ERP2,	ERROR		/EXTRA '('
	TAD (200
	TAD [OPEND-OPG+5000+1
	STORE
	TAD .-1
	DCA DUMPSW
	TAD CHAR
	ZORCH
	JMP I [CEND
	JMS GCNB	/LINE NUMBER FOLLOWING
	JMP I [CEND

XPUSH,	0
	DCA XPOP
	CMA
	TAD WARSAW
	DCA WARSAW
	TAD XPOP
	DCA I WARSAW
	JMP I XPUSH

XPOP,	0
	TAD I WARSAW
	ISZ WARSAW	/TOUGH ROUTINE.
	JMP I XPOP

XPUSHJ,	0
	DCA ICHECK
	TAD XPUSHJ
	IAC
	PUSH
	TAD I XPUSHJ
	DCA XPUSHJ
	TAD ICHECK
	JMP I XPUSHJ

XPOPJ,	POP
	DCA XPUSHJ
	JMP I XPUSHJ

	PAGE
COMPL,	STA
	STOLN
	CDF 10
	IAC
	DCA I PACKSV
	CDF
CGO,	IAC
	CMA
	SNA
	JMP CCK22
	CMA
	DCA SLIST-1
	TAD SLIST-1
	FINDLN
	JMP CCK
CGO2,	TAD T1
	DCA BOTTOM	/SAVE LINE NUMBER
	TAD UNWD
	DCA UNSV
	DCA RSW		/RESET CHAR COUNTER FOR ERRORS
	DCA C1
	TAD WARSAW
	DCA WSAVE
	DCA STSW
	JMS CETUP	/ALSO CALLED BY 'IF'
	JMS IDENT
	-STATS		/LENGTH OF LIST
	CLIST		/LIST OF COMMANDS
	JMP NBAS1	/NON-BASIC STATEMENT
	CLA
CGO1,	TAD BOTTOM
	STORE
	TAD TAL
CIFST,	STORE
	TAD TAL
	TAD (JMP I SLIST
	DCA .+1
	HLT
SLIST,		LET	/LET
		PRNTN	/PRINT #
		PRNT	/PRINT
		DATA	/DATA
		INPUT-1	/INPUT #
		INPLIN	/INPUT OR INPUT LINE
		CEND-2	/STOP
SEND=.-SLIST;	END
SREM=.-SLIST;	REM	/REM
		DIMNUM	/DIM #
		DIMNRM
		CEND-2	/RETURN
		REM	/RANDOMIZE
		OPEN
		CLOSE
		KILSTMT
		CHAIN
		CEND-2
PASS2=.-SLIST;	INPUT		/READ
SGOTO=.-SLIST;	GOTO
		GOTO
		FOR
		NEXT
		IF
		ON
STATS=.-SLIST;	ON

GOTO,	DEC
	STORE		/LINE NUMBER
	JMP CEND
	READ
	SKP
CEND,	TAD CHAR
	ZORCH		/CR LAST CHAR OF STATEMENT?
	SKP
CASE,	ERROR		/CHARACTERS AFTER STATEMENT END
	JMS CLEN
	TAD STSW
	SZA CLA
	JMP CGO2+5	/ANOTHER STATEMENT ON LINE
	TAD BOTTOM
	FINDLN
	SKP CLA		/ERROR WILL WIPE LINES
	WIPE		/GET RID OF UNCOMPILED LINE
CEND2,	TAD WSAVE	/RESET PDL
	DCA WARSAW
	TAD BOTTOM
	JMP CGO		/COMPILE NEXT LINE

CCK,	SZA CLA
	JMP CGO2
CCK22,	IAC
	TAD BOTTOM
	STORE
	DCA BOTTOM
NOEND,	ERROR		/NO 'END' STATEMENT
	CMA		/DECREMENT EROR COUNTER
	TAD ECNT
	DCA ECNT
	TAD (SEND+40
	STORE
	JMP END+5

CETUP,	0
	TAD ICHLV
	DCA STAT2
	TAD UNWD
	DCA STAT1
	JMP I CETUP

STAT1,	0
STAT2,	0
CHECK,	0
	CLA CLL		/CHECK FOR BUFFER OVERFLOW
	TAD MAXLOC
	TAD PACKWD	/ARE WE OVER?
	SNL CLA
	JMP I CHECK	/NOPE
	KILL		/SCROUNGE CORE
	JMP CHECK+1	/TRY AGAIN FOR DATA
OFULL,	ERROR		/OUT OF ROOM

	PAGE
END,	JMS CLEN
	TAD BOTTOM
	FINDLN
	SKP CLA
	WIPE
	KILL
	NOP
END1,	ISZ WARSAW
	TAD FORCNT	/CHECK FOR 'FOR' WITHOUT 'NEXT'
	SNA
	JMP CSTOP	/NONE
	TAD [-1
	DCA FORCNT
	POP
	DCA BOTTOM	/LINE NUMBER OF BAD 'FOR'
FWN,	ERROR		/'FOR' WITHOUT 'NEXT'
	ISZ WARSAW
	JMP END1	/THERE MIGHT BE MORE

XSTORE,	0		/STORE WORD FOR COMPILE
	CDF 10
	DCA I PACKWD
	ISZ I PACKSV
	CDF
	ISZ PACKWD
	ISZ C1
	JMS CHECK	/CHECK FOR STORAGE OVERFLOW
	JMP I XSTORE

CLEN,	0
	STA
	TAD C1
	CIA
	TAD PACKWD
	DCA T2
	STA
	TAD C1
	RTL6
	RAR
	CDF 10
	TAD I T2
	DCA I T2
	CDF
	JMP I CLEN

STSW,	0

CINPUT,	0
	JMS SPNOR	/IGNORE SPACES AND ^I
	TAD [-"!
	SNA
	TAD (215-"!
	TAD ("!-":
	SZA
	JMP .+3
	ISZ STSW	/MORE THAN ONE STATEMENT ON LINE
	TAD (215-":
	TAD (":
	UPPER
	JMP I CINPUT

XRTL6,	0
	RTL CLL
	RTL
	RTL
	JMP I XRTL6
DIMNUM,	CLA CLL CML RTR
	DCA DIMFSW
	IAC
	DCA MODE
	PUSHJ
	POLISH
	SKP
	SKP
	JMP ARERR
	STORE		/WILL MAGICALLY BECOME FILE # AT RUN
	TAD DIMKLG
	PUSH
	TAD DIMKLG+1
	PUSH
	TAD CURRNT
	PUSH
	TAD CURRNT+1
	PUSH
	TAD (JMS I [XXRAL
	DCA DIMKLG
	TAD (DCOM2&177+5200
	DCA DIMKLG+1
	DCA CURRNT
	DCA CURRNT+1
	JMS DIM
	TAD CURRNT
	AND [7400
	SZA CLA
FILBIG,	ERROR
FLBIG2,	TAD CURRNT+1
	CLL
	TAD [377
	AND [7400
	RAL
	TAD CURRNT
	RTL
	RTL
	STORE
	POP
	DCA CURRNT+1
	POP
	DCA CURRNT
	POP
	DCA DIMKLG+1
	POP
	DCA DIMKLG
	JMP I [CEND

DIMNRM,	DCA DIMFSW
	JMS DIM
	JMP I [CEND

	PAGE
	/COMPIL AN ARITHMETIC EXPRESSION
	/	-(AC)-	/CURRENT CHAR
	/	PUSHJ;POLISH
	/	RET1	/EXCESS RIGHT PAREN
	/	RET2	/TERMINATED BY ',' OR ';'
	/	RET3	/TERMINATED BY CR
	/	RET4	/TERMINATED BY ILLEGAL VARIABLE

	/RET4 IS ONLY GIVEN IF 'IFSW' IS NON-ZERO
	/CALL AT POLISH+1 OR WITH AC=0 TO FORCE READ
	/OF NEXT CHAR
	/CALL AT POLISH+2 OR WITH AC=CHAR TO USE CURRENT
	/CHARACTER

	ISZ WARSAW	/CONCATANATE OPERATOR FALLS THROUGH
POLISH,	SNA		/DOES AC CONTAIN A CHAR?
	READ		/NO,READ NEXT CHAR
	CLA		/NOT NEEDED TIL LATER
	DCA VARSW	/CLEAR VARIABLE READ SWITCH
	PUSH		/INITIALIZE OPERATOR STACK
XPOL1,	TAD CHAR	/MAIN LOOP STARTS HERE
	SORT		/IS IT A SPECIAL CHAR?
	OPS
	OPG-OPS
	TAD VARSW	/NO,ASSUME ITS EITHER A VAR OR LIT
	SZA CLA		/TO VARIABLES IN A ROW?
	JMP GOIFOR	/YES, CHECK IF WE'RE IN SPECIAL MODE
	ISZ VARSW	/BUMP FOR NEXT TIME
	TAD CHAR	/IS THIS A TRUE VARIABLE OR A
	NUMBCK		/NUMBER
	SKP		/TRUE VARIABLE
	JMP LIT		/NUMERIC LITERAL
	PUSHJ		/CALL VARIABLE CO-ROUTINE
	GETVAR		/RECURSIVLY (CHAR IS NOW IN AC)
	JMP XPOL1	/CYCLE THROUGH AGAIN
LPAREN,	JMS CHKA	/'(' READ
	IAC		/CHECK FOR ARITHMETIC MODE
	PUSH		/AND PUSH  INDICATOR OF LOWEST PRIORITY
XPOL11,	READ		/BUMP PAST THE '('
	JMP XPOL1+1	/AND LOOP
RPAREN,	POP		/')' READ
	SNA		/0 ON STACK MEANS WE'RE MISSING A '('
RPAR2,	POPJ		/GIVE FIRST RETURN
	RAR CLL		/IS THERE A '(' ON TOP??
	SNA		/NOPE
	JMP XPOL11	/YES, ALL DONE
	RAL		/RESTORE IT TO WHAT IT WAS
	JMS OP1		/AND OUTPUT SOME CODE
	JMP RPAREN	/LOOP UNTIL LEFT PAREN OR EMPTY STACK
OPRATR,	TAD VARSW	/+,-,*,/,^,<,>, OR = READ
	SZA CLA		/VARIABLE LAST READ?
	JMP BINARY	/YES, ITS A BINARY OPERATOR
	TAD CHAR	/CHECK CHAR
	TAD (-"+	/FOR LEGAL UNARY OPERATOR
	SNA		/IF UNARY '+' ...
	JMP XPOL11	/IGNORE
	TAD (-"-+"+	/UNARY '-'??
	SZA CLA
EOP,	ERROR		/EXTRA OPERATOR
	TAD (OPEND-OPG+2/YEP
	DCA DOWN	/FAKE LOW PRIORITY
	TAD [3		/AND FAKE OP CODE
	JMP UNARY2	/JUMP RIGHT IN
BINARY,	DCA ROPSW	/ZERO RELATIONAL OP SWITCH
	TAD TEMP	/DETERMINE PRIORITY
	TAD (-OPG
	DCA DOWN	/BY DEPTH IN LIST
	TAD DOWN
	SNA		/WAS IT A '+'?
	TAD MODE	/YES, STRING MODE?
	SPA		/(YES IF AC<0)
	JMP POLISH-1	/FALL RIGHT BACK IN!!
	RAR CLL		/DIVIDE DEPTH BY TWO
UNARY2,	TAD [3		/AND ADD KLUDGE FACTOR TO MAKE
	DCA PRIOR	/PRIORITY ASSIGNMENTS WORK RIGHT
	JMS CHKA	/WE HAD BETTER BE ARITHMETIC HERE!
	TAD DOWN	/(YOU CAN'T MULTIPLY STRINGS)
ROP2,	RTL CLL		/ZIP OP OVER WHERE IT BELONGS
	RAL CLL
	TAD PRIOR	/ADD IN PRIORITY
	DCA RFULL	/STASH IT FOR LATER USE
POL3,	TAD I WARSAW	/NOW COMPARE CURRENT PRIORITY WITH STACK
	AND (7		/MASK OUT PRIORITY PART
	CIA
	TAD PRIOR	/THISOP>LASTOP??
	SPA SNA CLA
	JMP NO		/NOPE
YES,	TAD RFULL	/DUMP THISOP ONTO STACK
	PUSH
	DCA VARSW	/ZERO VARIABLE SWITCH
	ISZ ROPSW	/BUMP RELATIONAL SWITCH
	JMP XPOL11	/LOOP SOME MORE!
	JMP XPOL1	/SAME,BUT DON'T BUMP OVER CHAR
NO,	POP		/THISOP<LASTOP, DUMP THISOP
	JMS OP1		/GENERATE THE CODE
	JMP POL3	/TRY AGAIN

	CLA CMA		/FELL INTO FROM BELOW
ROP,	DCA ROPSW	/COME HERE WHEN WE'VE IDENTIFIED
	TAD MODE	/WAS LAST ITEM A STRING?
	SMA CLA
	JMP .+3		/APPARENTLY NOT
	TAD [5002+OPEND-OPG+FUNCS
	STORE		/YES,OUTPUT STRING LINK FUNCTION
	TAD VARSW
	SNA CLA
	JMP EOP		/EXTRA OPERATOR
	CLA CLL CML RTL
	DCA PRIOR
	TAD TEMP
	TAD (-OPG
	JMP ROP2

ROP3,	READ		/'<'
	TAD (-">	/WAS IT THE '<>' CASE?
	SNA CLA
	JMP ROP5	/YES!
	TAD CHAR	/NO
	SKP
ROP4,	READ		/'>'
	TAD (-"=	/CHECK FOR '>=' OR '<='
	SZA CLA
	JMP ROP-1	/NOPE, FUN HAS JUST BEGUN
ROP6,	ISZ TEMP
	ISZ TEMP
	JMP ROP
ROP5,	CLA CMA		/BACK UP TEMP BY
	TAD TEMP	/ONE
	DCA TEMP
	JMP ROP
ROPSW,	0

	PAGE
LIT2,	TAD VARSW
	SZA CLA
MOP,	ERROR		/MISSING OPERATOR
	ISZ VARSW
LIT,	JMS CHKA
	IAC
	DCA MODE
	JMS FINPUT
	TAD LITP
	DCA LS
	TAD AC1
	JMS STOLIT
	TAD AC2
	JMS STOLIT
	TAD AC3
	JMS STOLIT
	JMS LSEARCH
	TAD (1000
	STORE
	DCA EXP
	DCA HORD
	DCA LORD
	DCA OVER
	JMP XPOL1

LSEARCH,0
	TAD [LITBUF+2
	DCA XR1
	TAD LITP
	CIA
	TAD LS
	DCA LSNUM
	DCA STOLIT
LS2,	TAD LSNUM
	CIA
	TAD STOLIT
	CIA
	TAD XR1
	DCA XR1
	CLA CMA
	TAD LS
	DCA XR2
	TAD LSNUM
	DCA STOLIT
LSLOOP,	TAD I XR1
	CIA
	TAD I XR2
	SZA CLA
	JMP LS2
	ISZ STOLIT
	JMP LSLOOP
	TAD LS
	CIA
	TAD XR1
	SPA CLA
	TAD LSNUM
	TAD LITP
	DCA LITP
	TAD LSNUM
	TAD XR1
	TAD [-LITBUF+1	/CALCULATE RELATIVE ADDRESS
	JMP I LSEARCH

GOIFOR,	TAD IFSW	/INSIDE AN ON-GOTO,IF OR FOR?
	SNA
IVAR2,	ERROR	/NO, THEN GIVE THE FATAL GOODBYE!
CR,	IAC
COMNA,	IAC
	DCA PRIOR
	TAD VARSW	/VARIABLE LAST READ?
	SNA CLA
MVAR,	ERROR		/MISSING VARIABLE
	POP		/ON CR, DUMP OPERATORS IN STACK
	SNA		/AND THEN TYPE FINISHED STRING
	JMP DUMP	/DUMP STRING AFTER STACK IS PURGED
	RAR CLL
	SNA		/"(" STILL IN STACK??
ELP,	ERROR		/EXTRA '('
	RAL		/RESTORE IT
	JMS OP1		/AND OUTPUT OP PART
	JMP CR+3	/DUMP STACK ON TERMINATOR

DUMP,	CLA CML CLL RAR
	AND MODE
	RTL CLL
	TAD [OPEND-OPG+5000	/ END-OF-LINE
DUMPSW,	STORE		/STASH IT AWAY
	TAD PRIOR	/AND EXIT
	POPJ

CHKA,	0
	TAD MODE
	SMA CLA
	JMP I CHKA

ARERR,	ERROR		/RECOVERS ARERR+1
	DCA IFSW
	TAD OP1+5	/'STORE'
	DCA DUMPSW
	JMP BADLN+2
OP1,	0
	RTR
	RAR
	AND [377		/GET BACK CHARACTER
	TAD (5000
	STORE
	CLA IAC
	DCA MODE
	JMP I OP1
OPS,	"+
	"-
	"*
	"/
	"^
	"=
	"#
	"<
	">
	"(
	")
	215
	",
	";
	".
	""
	0	/LIST OF OPERATORS

	PAGE
GETVAR,	JMS GETNM1	/CONVERT VAR TO ITS	ADDR IN SYMTAB-CHECK FOR FUNCTIONS
	TAD MODE
	SPA CLA
	JMP STR
	TAD CHAR
	TAD [-"(	/DIM FOLLOWING?
	SZA CLA
	JMP NOSUBS	/NO, SIMPLICITY PLUS
	JMS SUBCMN
	TAD I TEMP
	RTL
	RAL CLA
	CLL CML RAR
	ISZ TEMP
	AND I TEMP
	RAR
	PUSH
	READ
	PUSHJ;FUNCMN-1
	TAD I WARSAW
	RTL
	RAL CLA CMA CML
	TAD XSTC11
	SZA CLA
	JMP BSUBS	/NO, SUBSCRIPTS DON'T MATCH THOSE IN DIM STATEMENT
STRET,	JMS VRTCHK
FRET1,	READ		/DESTROY ")"
GCLA,	CLA		/SO THAT WE WON'T GET "ILLEGAL SYNTAX" ERROR
	POP		/RETRIEVE LOAD INSRUCTION
	SKP
NOSUBS,	JMS SEARCH	/FIND IT (HA!)
	NOP		/SURPRIZE, WE FOUND IT?
GSTORE,	STORE		/STORE THE ADDRESS
	ISZ WARSAW	/(DIVIDED BY THREE FOR NOW)
	POPJ

ALPHA,	0		/DETERMINE IF CHAR IS ALPHA OR NON-ALPHA
	SNA
	READ		/USE NEXT CHAR IF AC=0
	DCA CHAR	/RESTORE CHAR
	TAD CHAR
	TAD (-301	/CHAR<A?
	CLL
	TAD (-32
	SNL CLA
	ISZ ALPHA
	JMP I ALPHA	/2ND RET. FOR ALPHA CHAR


BSUBS,	ERROR		/RECOVERS CEND2

STR,	JMS SUBCMN
	TAD I TEMP
	RAL
	PUSH
	ISZ TEMP
	TAD I TEMP
	SNA CLA
	JMP STR3
	TAD CHAR
	TAD [-"(
	SZA CLA
MLP,	ERROR		/MISSING '('
	DCA CHAR	/FORCE THE READ IN POLISH
	PUSHJ;FUNCMN-1
	CMA
	TAD XSTC11
	SZA CLA
ISC,	ERROR		/INCONSISTENT SUBSCRIPTING
	JMP STRET

FTYP1,	TAD MODE
	SMA CLA
	JMS STCK
	"(
IFU,	ERROR		/ILLEGAL FUNCTION USE
FT3,	IAC
	ISZ MODE
	PUSHJ;FUNCMN
	CMA
FT4,	TAD XSTC11
	SZA CLA
	JMP IFU		/ILLEGAL FUNCTION USE
	JMP FRET1

FTYP2,	TAD MODE
	SPA SNA CLA
	JMS STCK
	"$;"(
	JMP IFU		/ILLEGAL FUNCTION USE
	CLA CLL CMA RAR
	DCA MODE
	JMP FT3

ASCII,	TAD MODE
	SMA CLA
	JMS STCK	/ASCII FUNCTION
	"I;"I;"(		/ONE OF THOSE MANY LETTERED
	JMP IFU		/ILLEGAL FUNCTION USE
	JMP FTYP3A	/USE AS MUCH OF FTYP3 AS WE CAN

FTYP3,	TAD MODE
	SMA CLA
	JMS STCK
	"(
	JMP IFU		/ILLEGAL FUNCTION USE
FTYP3A,	CLA CLL CML RAR
	JMP FT3+1

SYMSTO,	0
	DCA I SYMPTR
	ISZ SYMPTR
	TAD SYMPTR
	CIA
	TAD WARSAW
	SZA CLA
	JMP I SYMSTO
BIGDIM,	ERROR		/RECOVERS CSTOP2

STR3,	TAD (1000
	STORE
	JMS VRTCHK
	JMP GCLA

	PAGE
DIMDONE,	JMS DIMCOMN
	ISZ WARSAW	/CLEAR WASTE WORD OFF STACK
	TAD CHAR
	ZORCH
	JMP I DIM
	TAD (-",
	SZA CLA
DIMERR,	ERROR
	SKP

DIM,	0
	DCA MODE
	TAD (DEC
	DCA DECSW
	DCA HORD
	DCA LORD
	DCA OVER
	JMS GETNM1
	CLA CLL CML RAR
	TAD DIMFSW
	JMS SEARCH
DUPDIM,	ERROR
	CLA CLL
	TAD (-"(
	TAD CHAR
	SNA
	JMP DOK1
	TAD MODE
	TAD ("(-"=+4000
	SZA CLA
ILFORM,	ERROR
	JMP DIM3

DOK1,	NUMBCK
	JMP DIM2
	DCA TMP3
	JMS XMULT10
	JMP DOK1

DIM2,	CLA
	TAD MODE
	SPA CLA
	JMP STRCHK
	TAD CHAR
	TAD (-",
	SZA CLA
	JMP DO1

DIM3,	TAD HORD
	SNA
	TAD LORD
	SZA CLA
	ERROR
	TAD OVER
	IAC
	DCA MOPR
	TAD OVER
	CIA
	JMS SYMSTO
DECSW,	HLT
	CLA
	TAD MODE
	SMA CLA
	JMP OVERDM
	TAD LINE
	PUSH
	DCA LINE
	POP
	TAD (-3
	ISZ LINE
	ISZ LINE
	SMA SZA
	JMP .-4
	TAD DIMFSW
	IAC
	SPA CLA
	CLA CMA
	TAD [-1
	TAD LINE
	DCA LINE
	IAC

OVERDM,	TAD LINE
	CIA
	JMS SYMSTO
	TAD LINE
	IAC
	JMS MULT
MOPR,	0
	TAD MODE
	SPA CLA
	JMP DIMDONE
DIM5,	TAD CHAR
	TAD (-")
	SZA CLA
	JMP MRP
	READ
	CLA
	JMP DIMDONE

STRCHK,	TAD CHAR
	JMS I [STCK
	")
MRP,	ERROR
	TAD CHAR
	TAD (-"=
	SNA CLA
	JMP DIM3
	TAD (17
	DCA LINE
	DCA DECSW
	JMP DIM3

DO1,	TAD LORD
	JMS SYMSTO
	TAD OVER
	JMS SYMSTO
	ISZ OVER
	JMP DIM5
	ISZ LORD
	JMP DIM5


	PAGE
PRNTN,	JMS GCNB	/PRINT #
	TAD CHAR	/PRINT #N(CR)?
	ZORCH
	JMP PCR		/YES
PRNT,	JMS I [SAVSTUF
	JMS STCK
	"U;"S;"I;"N;"G	/!!!
	JMP PRNT2
	CLA CML CLL RAR
	DCA MODE
	TAD PDCAM
	DCA DUMPSW
	TAD CHAR
	PUSHJ;POLISH
	JMP ELP1
	TAD (100
	TAD (5600+OPEND-OPG
	STORE
	TAD CHAR
	ZORCH
	JMP PSTORE+1
	CLA SKP
PRNT2,	JMS RSTUFF
	READ
	SORT
	PLT1
	PLT2-PLT1
PDCAM,	DCA MODE
	TAD PDCAM
	DCA DUMPSW
	TAD CHAR
	PUSHJ
	POLISH
ELP1,	ERROR		/EXTRA '('
	JMP PRNCS
	TAD (200
	TAD MODE
PSTORE,	STORE
	TAD PSTORE
	DCA DUMPSW
	JMP CEND

PRNCS,	TAD CHAR
	TAD (-";
	SZA CLA
PRCNS1,	TAD (100
	TAD MODE
	STORE
	JMP PRNT

PCR,	TAD (5400+OPEND-OPG
	JMP PSTORE

PSEMI,	TAD [7600

PCOMA,	TAD (5500+OPEND-OPG
	STORE
	JMP PRNT

QUOTE,	TAD MODE
	SMA SZA CLA
MME,	ERROR		/MIXED MODE
	CLA CML CLL RAR
	DCA MODE
	TAD VARSW
	SZA CLA
MOP1,	ERROR		/MISSING OPERATOR
	ISZ VARSW
	TAD (OPEND-OPG+FUNCS+5001
	STORE
	JMS STRING
MQU,	ERROR		/MISSING "
	PACK
	JMP XPOL11


SUBCMN,	0
	CLA CLL CML RAR	/4000-LOOK ONLY AT DIMMED VARIABLES
	JMS SEARCH	/DIMENSIONED?
	JMP GOTIT	/SEMI-EASY
	PUSH		/SAVE THE LOCATION RESERVED
	JMS SYMSTO	/0 INTO UPPER HALF
	DCA DIMFSW
	TAD MODE
	SPA CLA
	TAD (-24
	TAD [12		/DECIMAL 10
	JMS SYMSTO	/INTO LOWER HALF
	DCA LORD	/SAME FOR LENGTH
	TAD (13
	DCA OVER
	JMS DIMCOM	/SETUP THE DIMENSION
	SKP
GOTIT,	PUSH		/PUSH THE ADDRESS WHICH WILL ALSO
	CLA CML CLL RAR
	AND MODE
	RTR CLL CML
	TAD I WARSAW
	DCA I WARSAW
	JMP I SUBCMN

XCRCHK,	0		/"ZORCH"!
	TAD [-215	/CHECK FOR CR
	SNA
	JMP I XCRCHK	/RETURN+1 WITH AC=0 IF CR
	TAD [215
	ISZ XCRCHK	/ELSE+2 WITH AC=CHAR
	JMP I XCRCHK

	PAGE
	/ENTER WITH 4000 TO SEARCH ONLY FOR DIMMED VARS
	/THUS, A NAME CAN BE BOTH DIMMED AND UNDIMMED YET SEPERATE

SEARCH,	0
	DCA DIMSW	/STORE SWITCH
	DCA SCOUNT
	TAD [SYMTAB
	DCA TEMP
SLOOP,	TAD TEMP
	CIA
	TAD SYMPTR
	SNA CLA
	JMP SOUT
	TAD DIMSW
	TAD I TEMP
	AND (5777
	CIA
	TAD I WARSAW
	SNA CLA
	JMP SOUT1
	TAD I TEMP
	SPA		/BUMP THREE OR FOUR
	ISZ SCOUNT	/TIMES!
	RAL CLL
	SMA
	JMP .+3
	ISZ TEMP
	ISZ SCOUNT	/MAYBE EVEN 5 TIMES
	ISZ SCOUNT
	ISZ SCOUNT
	ISZ SCOUNT
	RAL
	RTL CLL
	AND [7
	IAC
	TAD TEMP
	DCA TEMP
	JMP SLOOP
SOUT,	TAD I WARSAW
	TAD DIMSW	/FIX IT UP!
	JMS SYMSTO
	ISZ SEARCH
SOUT1,	TAD SCOUNT
	JMP I SEARCH

SCOUNT,	0

DIMCOM,	0
	TAD CURRNT
	JMS SYMSTO	/STORE STARTING ADDRESSES
	TAD CURRNT+1
	JMS SYMSTO
	TAD MODE	/NOW, BUMPITY-BUMP WE GO
	SPA CLA
	JMP DCOM2	/STRING,DON'T MULT BY 3
	TAD OVER
	DCA TMP1
	TAD LORD
	DCA TMP2
	JMS XXRAL
DIMKLG,	TAD OVER
	TAD TMP1
	DCA OVER
	RAL
	TAD LORD
	TAD TMP2
	DCA LORD
DCOM2,	CLL
	TAD DIMFSW
	SZA CLA
	CLA CML CLL RTL
	TAD OVER
	DCA OVER
	RAL
	TAD OVER
	TAD CURRNT+1
	DCA CURRNT+1
	RAL
	TAD LORD
	TAD CURRNT
	DCA CURRNT
	TAD DIMFSW
	SNA CLA
	JMP I DIMCOM
	TAD CURRNT+1
	AND K7774
	DCA CURRNT+1
	TAD PACKSV
	CMA
	TAD PACKWD
	TAD (BUFBEG+1
	JMS SYMSTO
	JMP I DIMCOM

	CLA IAC
FUNCMN,	DCA DIMCOM
	TAD DUMPSW	/SAVE SOME SWITCHES
	PUSH		/ON PDL
	TAD MODE
	PUSH
	TAD DIMCOM
	DCA MODE	/ARITHMETIC MODE
	TAD FCLA
	DCA DUMPSW
	PUSH		/SERVE AS COUNTER
	TAD CHAR
GOTIT2,	ISZ I WARSAW	/BUMP ANOTHER COUNTER
	PUSHJ;POLISH	/EVALUATE THE EXPRESSION INSIDE THE PARENS
	JMP SUBDNE	/UNBALANCED RPAREN MEANS WE'RE DONE
	JMP GOTIT2	/COMMA OR SEMI,CONTINUE
CRS,	ERROR		/CR INSIDE SUBSCRIPT
SUBDNE,	POP
	DCA XSTC11	/COUNTER
	POP
	DCA MODE
	POP
	DCA DUMPSW
	POPJ		/ALL FINISHED
PLT1,	",
	";
	215
K7774,	7774		/END OF ABOVE LIST, TOO
PLT2,	PCOMA
	PSEMI
	PCR

	PAGE
GETNM1,	0		/ASSEMBLE VARIABLE NAME
	JMS ALPHA	/FIRST CHAR ALPHA?
	JMP IVAR2	/NO, ILLEGAL VARIABLE
	JMS SAVSTUFF
	TAD CHAR
	AND [37		/STORE 1ST CHAR
	PUSH
	JMS ALPHA	/CHECK NEXT CHAR
	JMP NMOK	/NOT ALPHA,MIGHT BE AN ORDINARY VARIABLE
	TAD I WARSAW	/ALPHA, MUST BE A FUNCTION NAME
	RTL6
	PUSH		/STORE AGAIN
	TAD CHAR
	AND [77		/GET SECOND CHAR OF NAME
	POP
	DCA RFULL	/AND SAVE IT
	TAD (-FUNCS
	DCA TEMP	/NUMBER OF FUNCTIONS
	TAD (FUNLST-1
	DCA XR1		/FIRST LOCATION OF TABLE
	DCA XSTC11	/USED AS COUNTER
F2,	TAD I XR1
	TAD RFULL	/MATCH?
	SNA CLA
	JMP GOTF	/YES!
	ISZ XR1		/NO, TRY NEXT FUNCTION
F22,	ISZ XR1
	ISZ XSTC11
	ISZ TEMP	/TRIED ALL?
	JMP F2		/NO
	TAD IFSW
	JMP NMOK	/YES ILLEGAL VARIABLE

GOTF,	JMS SAVSTUF
	TAD I XR1
	SNA
	JMP GOTF2
	PUSH
	READ
	POP
	SZA CLA
	JMP NMKLGE	/NO,ILLEGAL VARIABLE
GOTF2,	ISZ WARSAW
	TAD I XR1
	DCA GETNM1
	PUSH
	TAD XSTC11
	TAD [5003+OPEND-OPG
	PUSH
	JMP I GETNM1
NMKLGE,	JMS RSTUFF
	JMP F22
NMOK,	CLA
	TAD I WARSAW
	RTL CLL
	RTL		/FORM VARIABLE NAME ON TOP
	DCA I WARSAW	/OF STACK
	TAD CHAR
	NUMBCK
	JMP .+5		/NEXT CHAR A NUMBER?
	IAC
	TAD I WARSAW	/YES,ADD IT IN IN BITS 8-11
	DCA I WARSAW
	READ		/NEXT CHAR
	CLA		/WE REALLY DON'T WANT IT
	TAD CHAR
	TAD (-"$
	SZA CLA
	JMP ACK
	TAD MODE
	SMA SZA CLA
	JMP MME1-1
	READ
	CLA
	TAD I WARSAW
	AND [17
	SZA CLA
ISV,	ERROR		/ILLEGAL STRING VARIABLE
	TAD [17
	TAD I WARSAW
	DCA I WARSAW
	CLA CLL CML RAR
GETEX,	DCA MODE
	JMP I GETNM1	/TURNED OUT TO BE STRING-ALL'S COOL

ACK,	TAD MODE	/"EITHER" MODE?
	SMA CLA
	JMP ACK2
	JMS RSTUFF
MME1,	ERROR		/MIXED MODE EXPRESSION
ACK2,	IAC
	JMP GETEX

SWLDOP,	0
	CLA CMA
	TAD PACKWD
	DCA GETNM1
	CDF 10
	CLA CLL CML RAR
	TAD I GETNM1
	DCA I GETNM1
	CDF
	SZL
MAS,	ERROR		/MISSING ASSIGNMENT OPERATOR
	JMP I SWLDOP

SAVSTU,	0
	TAD RSW
	DCA XR4
	TAD CHAR
	DCA PNTR2
	TAD ICHLV
	DCA XR3
	TAD UNWD
	DCA XR2
	JMP I SAVSTUF

REM,	TAD CHAR
	SKP
	UNPACK
	ZORCH
	JMP CEND+4
	JMP .-3

	PAGE
	/SECOND PASS OF COMPILE
	/CHANGE ALL REFERENCES TO LINE NUMBERS
	/TO CORE LOCATIONS

CSTOP,	CDF 10
	TAD I (4	/PICK UP LINE NUMBER
	CIA
	DCA C1
	TAD [BUFBEG+1
	DCA I (17
	CDF
	JMS SYMSTO
	KILL	
	NOP
	TAD (JMP I [QFUG
	DCA SKIP+1	/FIX FINDLN
	CLA CLL CML RTL
	TAD [BUFBEG
	DCA [BUFBEG
	TAD PACKSV
	TAD (BUFBEG+1^7777
	SNA CLA		/CHECK IF 'END' WAS LAST
	JMP .+2		/OK
ENL,	ERROR		/'END' NOT LAST
	TAD PACKSV
	IAC
QNEXT,	CDF 10
	DCA PRIOR
	TAD I PRIOR
	DCA LINE
	TAD LINE
	TAD C1
	SZA CLA
	JMP .+4
	CMA
	TAD PRIOR	/SAVE STARTING LOC
	DCA I (17
	ISZ PRIOR
	IAC
	TAD PRIOR
	CIA CLL CML
	TAD PACKWD
	SZL SNA CLA
	JMP LSWAPL
	TAD I PRIOR
	RTR CLL;RTR;RAR
	AND [177
	CIA
	IAC
	DCA QLEN
	TAD I PRIOR
	AND (37
	TAD QPASS2
	SMA
	JMP DOPAS2
	CLA
QRD1,	CDF 10
	TAD I PRIOR		/SKIP TO NEXT LINE
	RTL6
	RTL
	AND [177	/LENGTH OF LINE
QNEXT1,	TAD PRIOR	/+PRIOR
	JMP QNEXT	/=NEXT LINE

	QONSYM=OPEND-OPG+5000

QON,	ISZ PRIOR
	CDF 10
	TAD I PRIOR
	ISZ QLEN
	TAD (-QONSYM
	SZA CLA
	JMP QON

QGOTO,	JMS QREP
QGO,	ISZ QLEN
	JMP QGOTO
	IAC
	JMP QNEXT1

QFUG,	TAD I UNWD	/PATCH TO FINDLN
	RTL6
	RTL
	AND [177
	JMP SKIP+2

DOPAS2,	CDF
	TAD (JMP I GLST
	DCA .+1

QREP,	0
	ISZ PRIOR
	CDF 10
	TAD I PRIOR
	FINDLN
QCHANG,	JMP QUNDEF
	CLA CLL CMA RTL	/-3
	TAD UNWD
	CDF 10
	DCA I PRIOR
	CDF
	JMP I QREP

QIF,	DCA QCHANG
	JMS QREP
	TAD (JMP QUNDEF
	DCA QCHANG
	TAD QLEN
	CIA
	JMP QNEXT1

GLST,	QREAD
	QGOTO
	QGOTO
	QRD1		/TEMP KLUDGE FOR
	QRD1		/FORS AND NEXT
	QIF
	QON
	QON

	PAGE
QREAD,	TAD LINE
	DCA BOTTOM
	ISZ DATASW	/ANY DATA STATEMENTS
NODATA,	ERROR		/READ WITHOUT DATA
	JMS DSET
	TAD [232
	PACK
	PACK
	TAD (QRD1	/ONLY CHECK FOR READ WITHOUT
	DCA GLST	/'DATA' ONCE.
	TAD DBLK
	TAD [-40	/FIRST BLOCK IN CORE?
	SNA CLA
	JMP QREAD1		/YES
	SKP
	PACK		/DUMP THIS BUFFER
	TAD DATAPT
	TAD (-7244
	SZA CLA
	JMP .-4		/PACK ANOTHER NULL
	JMS 7607	/NO, READ IT IN
	210
	7245
	40
	HLT
QREAD1,	CMA
	DCA DATAPT
	CMA
	JMP QIF+4

DATA,	CLA CMA
	DCA DATASW	/INDICATE THERE WAS SOME DATA
	TAD (-7244	/KEEP OBJECT CODE FROM
	DCA MAXLOC	/DESTROYING DATA
	JMS CHECK
	JMS DSET
DATA1,	JMS SPNOR	/IGNORE LEADING SPACES AND ^I
	SKP
DATA2,	UNPACK
	DCA CHAR
	TAD CHAR
	PACK
	TAD CHAR
	TAD (-""
	SNA CLA
	STL RAR
	TAD QSW
	DCA QSW
	TAD CHAR
	ZORCH
	JMP DEND
	TAD QSW
	TAD (-",
	SNA CLA
	JMP DATA1	/IGNORE SPACES AND ^I AFTER ','
	JMP DATA2

DEND,	TAD QSW
	SZA CLA
QUNQ,	 ERROR		/NO CLOSING QUOTE
	TAD (XSTORE
	DCA XDSTORE
	TAD CHAR1
	DCA D1
	TAD CHAR2
	DCA D2
	TAD CHAR3
	DCA D3
	TAD OUJMP
	DCA D4
	TAD OUJMPE	/REINITIALIZE PACK
	DCA OUJMP	/POINTER!
	JMP CEND+4

DSET,	0
	TAD D1
	DCA CHAR1
	TAD D2
	DCA CHAR2
	TAD D3
	DCA CHAR3
	TAD D4
	DCA OUJMP
	TAD (DSTORE
	DCA XDSTORE
	JMP I DSET

DSTORE,	0
	CDF 10
	DCA I DATAPT
	CDF
	TAD DATAPT
	TAD (-7644
	SZA CLA
	JMP I DSTORE
	TAD (7244	/TIME TO DUMP BUFFER
	DCA DATAPT
	JMS 7607
	4210
	7245		/BUFFER
DBLK,	40		/SCRATCH BLOCKS IN MONITOR
	ERROR
	ISZ DBLK
	TAD DBLK
	TAD (-50
	SNA CLA
DATERR,	ERROR		/TOO MUCH DATA
	JMP I DSTORE

DATASW,	0
D2,	0
D3,	0
D4,	OUJMP&177+5200

	PAGE
FPOL,	0
	ISZ IFSW
	PUSHJ
	POLISH
	NOP
ERP3,	ERROR
	NOP
	DCA IFSW
	JMP I FPOL

	/ON GOTO AND ON GOSUB

ON,	IAC
	DCA MODE	/NON-STRING ONLY
	ISZ IFSW
	PUSHJ
	POLISH
	NOP
	NOP
	JMP ARERR
	DCA IFSW
	TAD CHAR
	JMS STCK
	"G;"O;"T; "O
	SKP
	JMP ONGO	/ON GOTO
	TAD CHAR
	JMS STCK	/CHECK FOR GOSUB
	"S; "U; "B
	JMP NGO		/NON-BASIC STATEMENT
	JMS ON1
	ISZ I TEMP
	CDF
ONGO,	TAD CHAR
	NUMBCK
	JMP NBAS
ONGO2,	DEC
	STORE
	TAD CHAR
	ZORCH
	JMP CEND	/DONE
	TAD (-",
	SNA CLA
	JMP ONGO2	/NEXT
	JMP ARERR

STCK,	0
	SNA
	READ
	DCA CHAR	/KINDA STANDARD
	TAD I STCK	/GET SORT ITEM
	ISZ STCK
	CIA		/CIA
	TAD CHAR
	SNA CLA		/MATCH CURRENT CHAR?
	JMP STCK+2	/YES,CONTINUE MATCHING
	JMP I STCK	/NO, EXIT-EITHER NON-MATCH OR END OF LIST

ON1,	0
	TAD C1		/ON GOTO +1 = ON GOSUB
	CIA
	TAD PACKWD
	IAC
	DCA TEMP
	CDF 10
	JMP I ON1

NGO,	JMS ON1		/MAKE BAD ON STATEMENT INTO
	TAD I TEMP	/HARMLESS LET FOR SECOND PASS
	AND [7740
	DCA I TEMP
	CDF
	JMP NBAS

	/IF STATEMENT

IF,	DCA MODE
	ISZ IFSWCH
	TAD BOTTOM
	IAC
	STORE		/LINE # OF NEXT STATMENT
	ISZ IFSW
	PUSHJ
	POLISH
	NOP
	NOP
	JMP ARERR
	DCA IFSW
	DCA IFSWCH
	TAD CHAR
	JMS STCK
	"T; "H; "E
	JMP NBAS	/NO 'THEN'
	TAD CHAR
	TAD (-"N
	SZA CLA
	 JMP NBAS	/MISSPELLED 'THEN'
	JMS CETUP	/SAVE POINTERS IN CASE OF IMPLIED LET
	JMS CLEN
	DCA C1
	NUMBCK
	JMP IFST	/STAMENT FOLLOWOG 'THEN'
	DCA CHAR
	TAD BOTTOM
	STORE
	TAD (SGOTO		/CREATE GOTO
	STORE
	TAD CHAR
	DEC
	STORE
	JMP CEND	/ALL DONE
IFST,	CLA
	TAD CHAR	/FIRST CHAR IS ALREADY READ
	JMP CGO1-5

QUNDEF,	CLA
	TAD LINE
	DCA BOTTOM	/LINE NUMBER OF ERROR
UNDEF,	ERROR		/RECOVERS AT QGO

	PAGE
	/FOR STATEMENT

FOR,	IAC
	DCA MODE	/NON-STRING ONLY
	JMS GETNM1
	JMS SEARCH
	NOP
	DCA I WARSAW
	TAD I WARSAW
	STORE
	ISZ FORCNT
	TAD BOTTOM
	PUSH
	CMA CLL RTL	/-3
	TAD WSAVE	/NOW WE HAVE 3 MORE PERMENANT ENTRIES
	DCA WSAVE	/IN THE PDL.
	TAD CHAR
	TAD (-"=
	SZA CLA
MEQ2,	ERROR		/MISSING =
	TAD (CLA
	DCA DUMPSW
	JMS FPOL	/STARTING VALUE
	TAD CHAR
	JMS STCK
	"T; "O;
	JMP NBAS
	TAD CHAR
	JMS FPOL	/ENDING VALUE
	TAD CHAR
	ZORCH		/STEP?
	JMP NSTEP	/NO STEP
	JMS STCK
	"S; "T; "E; "P
	JMP NBAS
	TAD CHAR
	JMS FPOL
FOR1,	DCA IFSW
	TAD FSTORE
	DCA DUMPSW
	TAD (QONSYM
FSTORE,	STORE		/END OF LINE
	TAD (-7
	DCA TMP2
	STORE
	ISZ TMP2
	JMP .-2
	TAD PACKSV
	CMA
	TAD PACKWD
	PUSH
	JMP CEND	/DONE


NSTEP,	TAD LITP
	DCA LS
	IAC
	JMS STOLIT	/CREATE STEP OF 1
	CLA CLL CML RTR
	JMS STOLIT
	JMS STOLIT
	JMS LSEARCH
	TAD (1000
	STORE		/ADDR OF LITERAL
	JMP FOR1

	/NEXT STATEMENT

NEXT,	IAC
	DCA MODE	/NO STRINGS ALLOWED
	TAD FORCNT
	SNA
	JMP NER		/NEXT WITHOUT FOR
	TAD (-1
	DCA FORCNT
	TAD WSAVE	/WE NOW HAVE 3 FEWER
	TAD (3
	DCA WSAVE	/PERMENANT ENTRIES IN THE PDL.
	POP
	DCA M1
	TAD M1
	TAD PACKSV	/GENERATE ADDR OF 'FOR'
	DCA TEMP
	TAD PACKSV
	CIA
	TAD PACKWD
	TAD (BUFBEG+2
	CDF 10
	DCA I TEMP
	CDF
	ISZ WARSAW
	JMS GETNM1
	JMS SEARCH
	NOP
	ISZ WARSAW
	CIA
	TAD I WARSAW
	SZA CLA
	JMP NER		/NEXT WITHOUT MATCHING FOR
	POP
	STORE		/VAR ADDR
	TAD M1
	TAD (BUFBEG-6
	STORE		/LINE NUMBER
	JMP CEND
NER,	ERROR
	TAD BOTTOM	/GET RID OF BAD LINE
	FINDLN
	HLT		/IT HAD BETTER BE THERE!
	WIPE
	JMP BADLN+2

	PAGE
MULT,	0
	DCA OVER
	DCA LORD
	TAD (-15
	DCA SEARCH
	JMP MULT2
MULT1,	TAD I MULT
	SNL
	CLA CML
	TAD LORD
	CML RAR
	DCA LORD
MULT2,	TAD OVER
	RAR
	DCA OVER
	ISZ SEARCH
	JMP MULT1
	ISZ MULT
	JMP I MULT

XMULT,	0
	TAD TAL
	TAD EXP
	DCA EXP
	TAD HORD
	DCA TMP1
	TAD LORD
	DCA TMP2
	DCA HORD
	DCA LORD
	TAD (7750
	DCA TMP3
XXLP,	TAD ETMP1
	CLL RAR
	DCA ETMP1
	TAD ETMP2
	RAR
	DCA ETMP2
	CML
	SNL
	JMS XXADD
	TAD HORD
	CLL RAR
	DCA HORD
	TAD LORD
	RAR
	DCA LORD
	ISZ TMP3
	JMP XXLP
	JMS XNORM
	JMP I XMULT

XMULT10,0
	JMS XXRAL
	TAD HORD
	DCA TMP1
	TAD LORD
	DCA TMP2
	TAD OVER
	DCA XMULT
	JMS XXRAL
	JMS XXRAL
	TAD TMP3
	TAD XMULT
	TAD OVER
	DCA OVER
	RAL
	JMS XXADD
	SZL SPA
	JMP I (ILITER
	JMP I XMULT10

XXRAL,	0
	TAD OVER
	CLL RAL
	DCA OVER
	TAD LORD
	RAL
	DCA LORD
	TAD HORD
	RAL
	SZL SPA
	JMP I (ILITER
	DCA HORD
	JMP I XXRAL

XNORM,	0
	TAD HORD
	SNA
	TAD LORD
	SNA
	TAD OVER
	SZA CLA
	JMP .+3
	DCA EXP
	JMP I XNORM
	TAD HORD
	RTL
	SZL CLA
	JMP I XNORM
	JMS XXRAL
	CLA CMA
	TAD EXP
	DCA EXP
	JMP .-10

XXADD,	0
	TAD TMP2
	TAD LORD
	DCA LORD
	RAL
	TAD TMP1
	TAD HORD
	DCA HORD
	JMP I XXADD

TABLE1,	4;5000;0
TABLE2,	7775;6314;6315

	PAGE
FINPUT,	0
	CLA CLL
	DCA ESW
	DCA PERBMP
	DCA PERCT
	DCA HORD
	DCA LORD
	DCA OVER
	TAD CHAR
DIGLOOP,NUMBCK
	JMP NOTNUM
	DCA TMP3
	JMS I (XMULT10
PERBMP,	NOP
	JMP DIGLOOP
NOTNUM,	TAD (-"E
	SNA
	JMP EXPNT
	TAD ("E-".
	SZA CLA
	JMP LITEND
	TAD PERCT
	SNA
	TAD ESW
	SZA CLA
ILITER,	ERROR		/RECOVERS CEND2
	TAD PCTBMP
	DCA PERBMP
	JMP DIGLOOP
EXPNT,	DCA PERBMP
	TAD ESW
	SZA CLA
	JMP ILITER
	ISZ ESW
	READ
	TAD (-"-
	SNA
	JMP NEGEXP
	IAC
	IAC
	SNA CLA
SWITCE,	READ
	CLA
	TAD HORD
	DCA ETMP1
	TAD LORD
	DCA ETMP2
	TAD OVER
	DCA ETMP3
	JMP DIGLOOP-4

NEGEXP,	CLA CMA
	DCA ESW
	JMP SWITCE
LITEND,	TAD ESW
	SNA CLA
	JMP NOEXP
	TAD HORD
	SNA
	TAD LORD
	SZA CLA
	JMP ILITER
	TAD OVER
	ISZ ESW
	CIA
	DCA ESW
	TAD ETMP1
	DCA HORD
	TAD ETMP2
	DCA LORD
	TAD ETMP3
	DCA OVER
NOEXP,	TAD ESW
	TAD PERCT
	DCA ESW
	TAD (43
	DCA EXP
	JMS I (XNORM
MPYLP,	TAD ESW
	SNA
	JMP I FINPUT
	SPA CLA
	TAD (TABLE1-TABLE2
	TAD (TABLE2-1
	DCA XR1
	TAD ESW
	SMA
	TAD (-2
	IAC
	DCA ESW
	TAD I XR1
	DCA TAL
	TAD I XR1
	DCA ETMP1
	TAD I XR1
	DCA ETMP2
	JMS I (XMULT
	JMP MPYLP
ESW=PROTECT
PERCT,	ESW
PCTBMP,	ISZ PERCT

RSTUFF,	0
	TAD XR4
	DCA RSW
	TAD PNTR2
	DCA CHAR
	TAD XR3
	DCA ICHLV
	TAD XR2
	DCA UNWD
	JMP I RSTUFF
	PAGE
/OPEN <DEV:><NAME> FOR IN/OUT PUT AS FILE I

OPEN,	STORE		/SAVE LOC FOR IN/OUT SWITCH
	DCA NCHNG
	CLL CML CLA RAR
	DCA MODE
	ISZ IFSW
	PUSHJ; POLISH
	NOP
	NOP
	JMP ARERR
	DCA IFSW
	TAD CHAR
	JMS STCK
	"F; "O; "R
	JMP OBIN
	TAD CHAR
	JMS STCK
	"O; "U; "T
	SKP
	JMP OOUT	/OUTPUT
	TAD CHAR
	JMS STCK
	"I; "N
	JMP NBAS
	ISZ NCHNG
OOUT,	ISZ NCHNG
	TAD CHAR
	JMS STCK
	"P; "U; "T
	JMP NBAS
OBIN,	TAD CHAR
	JMS STCK
	"A; "S; "F; "I; "L; "E
	JMP NBAS
	CMA
	JMS ON1
	TAD NCHNG
	CMA
	DCA I TEMP
	CDF
	IAC
	DCA MODE
	TAD CHAR
	PUSHJ; POLISH	/COMPILE FILE NUMBER
	NOP
	JMP ARERR
	JMP I [CEND

NBAS1,	TAD CHAR
	TAD [-215
	SZA CLA
	JMP .+4
	TAD (SREM	/PDP 11 TYPE REM
	DCA TAL
	JMP CGO1
	JMS NCHNG	/ON NON-BASIC STATEMENT
	READ
CCLA,	CLA
	CMA CLL RAL
	TAD RSW
	DCA RSW
	JMS ALPHA
	JMP NLET	/TRY TO MAKE A 'LET' OUT OF IT
NBAS,	ERROR		/RECOVERS AT CEND2


NLET,	DCA TAL
	JMS NCHNG
	JMP CGO1

NCHNG,	0
	TAD STAT1
	DCA UNWD
	TAD STAT2
	DCA ICHLV
	JMP I NCHNG

CLOSE,	IAC
	DCA MODE	/NON-STRING
	TAD CCLA
	DCA DUMPSW
	READ
	ZORCH
	JMP CL1		/'CLOSE' WITHOUT ARGS
	PUSHJ; POLISH
	JMP ARERR
	JMP .-3
	TAD [OPEND-OPG+5000
	STORE
CL1,	TAD OPEN
	DCA DUMPSW
	JMP I [CEND

XPRI3,	0
	AND (77
	SNA
	JMP I XPRI3
	TAD (-37
	SNA
	TAD (215-337
	SPA
	TAD (337-237
	TAD (237
	ISZ XPRI3
	JMP I XPRI3


	PAGE
	/ROUTINE TO SETUP LITERALS AND SYMBOLS

LSWAPL,	DCA I (6
	TAD (LITBUF-1
	DCA XR1
	TAD I (BUFBEG+1	/GET LENGTH OF COMPILED PROG
	TAD (BUFBEG+1
	DCA XR2
	TAD XR2
	DCA I (13	/LBASE
	TAD LITP
	TAD (-LITBUF
	CIA
	SNA
	JMP LSW11
	DCA TEMP
	CDF
	TAD I XR1
	CDF 10
	DCA I XR2
	ISZ TEMP
	JMP .-5
LSW11,	TAD (SYMTAB-1
	DCA XR1
	TAD XR2
	DCA I (14	/SBASE
LSWPG1,	CDF
	TAD I XR1
	SNA
	JMP LSWEN1
	SPA
	JMP ARRAYZ
	CLA
	CDF 10
	DCA I XR2
	DCA I XR2
	JMP LJMPIN
ARRAYZ,	RAL
	SMA CLA
	IAC
	TAD (-4
	DCA STOLIT
	TAD I XR1
	CDF 10
	DCA I XR2
	CDF
	ISZ STOLIT
	JMP .-5
	TAD I XR1
LJMPIN,	CDF 10
	DCA I XR2
	JMP LSWPG1
LSWEN1,	TAD XR2
	CDF 10
	DCA I (16	/ABASE
	TAD CURRNT
	SZA CLA
	JMP TMANY
	ISZ DATAPT
	JMP LNODAT
	IAC
	TAD I (4
	SZA CLA
	JMP SETBUF
	CDF
	TAD DBLK
	TAD [-40
	SZA
	JMP LDATA
	JMS I (7607
	4210
	7245
	40
	ERROR
	IAC
LDATA,	CDF 10
	DCA I (6
SETBUF,	TAD (7245-7645
LNODAT,	TAD (7645
	DCA I (0
	TAD CURRNT+1
	TAD XR2
	CIA
	CLL CML
	TAD I (0
	SZL CLA
TMANY,	 ERROR		/TOO MANY ARRAYS!
	TAD CURRNT+1
	SNA
	JMP .+6
	CIA
	DCA TEMP
	DCA I XR2
	ISZ TEMP
	JMP .-2
	TAD XR2
	DCA I (20	/OSTART
	JMP LSWAP2

STOLIT,	0
	DCA I LITP
	ISZ LITP
	TAD LITP
	TAD (-SYMTAB
FCLA,	SZA CLA
	JMP I STOLIT
LITERR,	ERROR		/RECOVERS CSTOP

	PAGE
LSWAP2,	CLL CLA CMA RAR
	AND I (21
	SNA
	JMP LSWXIT
	RTR CLL
	RTR
	RTR
	DCA LSWFUN
	TAD LSWFUN
	RAL CLL
	CIA
	TAD I (0
	DCA LSWBUF
	TAD LSWFUN
	TAD (10
	DCA LSWFUN
	CDF
	JMS I (7607
LSWFUN,	0
LSWBUF,	0
	31
	JMP DBLK+1
	JMS I (7607
	100
	7200
	33
	JMP DBLK+1
	CDF 10
	TAD I (0
	TAD [200
	AND [7600
	DCA LSWFUN
	TAD (7200
	DCA LSWBUF
	TAD (-4
	DCA LSWBUF+1
	CDF
LSWLUP,	TAD I LSWBUF
	RTL
	RTL CLL CLA CML
	IAC
	TAD LSWBUF
	DCA LSWBUF+2
	TAD I LSWBUF+2
	SZA
	TAD LSWFUN
	DCA I LSWBUF+2
	TAD LSWBUF
	TAD (16
	DCA LSWBUF
	ISZ LSWBUF+1
	JMP LSWLUP
LSWXIT,	CDF
	JMP RUN

MID,	TAD IFSWCH	/MID(A$,N1,N2) FUNCTION
	SNA		/ILLEGAL IN IF STMT(RUN BUG)
	TAD MODE
	SPA SNA CLA	/LEGAL ONLY IN STRING EXPR
	JMS I [STCK	/CHECK FOR "("
	"(;JMP IFU	/NO "(" OR USED IN ARITH EXPR
	TAD CHAR	/RECOVER THE ARGUMENT
	PUSHJ;GETVAR	/PICK UP THE STRING VAR
	TAD CHAR	/**SIMPLE STRING VAR ONLY ALLOWED**
	JMS I [STCK	/CHECK FOR COMMA FOLLOWING
	",;JMP IFU	/TOUGH LUCK
	TAD (5005+OPEND-OPG+FUNCS
	STORE
	IAC		/NEXT TWO ARGS ARE ARITHMETIC
	PUSHJ;FUNCMN	/PICK UP THE NEXT TWO ARGS
	CLA CMA CLL RAL	/CHECK FOR ONLY TWO ARGS BY
	JMP FT4		/FOLDING INTO FTYPE1

VRTCHK,	0
	POP
	SMA CLA
	JMP I VRTCHK
	TAD MODE
	SPA CLA
	TAD IFSWCH
	SZA CLA
VRTERR,	ERROR
	TAD (5003+OPEND-OPG+FUNCS
	STORE		/VIRT CORE THING
	JMP I VRTCHK


QVRTER,	TEXT	/CAN'T 'IF' VIRTUAL STRING/;ARERR+1

	PAGE

INPLIN,	JMS I [SAVSTUF	/INCASE ITS NOT 'INPUT LINE'
	JMS I [STCK
	"L;"I;"N;"E;JMP I KJMP	/IT WASN'T!
	TAD CHAR	/CHECK FOR 'INPUT LINE #EXPR'
	TAD KPND
	SZA CLA		/IS IT?
	JMP NTFIL	/NOPE,HE'S SWEET
	JMS I KGCNB	/CONVERT THE EXPR
	JMS I KON1		/SETS TEMP TO COMMAND TYPE
	CLA CMA		/SO WE CAN CHANGE
	TAD I TEMP	/COMMAND TO FILE INPUT
	DCA I TEMP	/(IT SET FIELD TO 1)
	DCA CHAR	/FORCE A READ
	CDF
NTFIL,	TAD KI5004	/NO LITS ON THIS PAGE!
	STORE		/PSUEDO-FUNCTION
	CLA CML CLL RAR
	DCA MODE	/WE CAN ONLY HAVE ONE STRING VAR
	TAD CHAR
	PUSHJ;GETVAR	/FOR ONE LINE INPUTTED
	JMS I KSWLD	/MAKE IT A STORE
	TAD KI5001
	STORE		/END-OF-EXPR (AND INPUT)
	JMP I [CEND	/THAT'S IT!

KSWLD,	SWLDOP
KON1,	ON1
KI5004,	5004+OPEND-OPG+FUNCS
KI5001,	5001+OPEND-OPG

KGCNB,	GCNB
KPND,	-"#
KJMP,	INPUT-3

KERP,	ERP
KMC,	MC

KILSTM,	CLA CLL CML RAR
	DCA MODE
	PUSHJ; POLISH
	JMP I KERP
	JMP I KMC
	JMP I [CEND


CLIST,	TEXT /LET/
	TEXT /PRINT#/
	TEXT /PRINT/
	TEXT /DATA/
	TEXT /INPUT#/
	TEXT /INPUT/
	TEXT /STOP/
	TEXT /END/
	TEXT /REM/
	TEXT	/DIM#/
	TEXT /DIM/
	TEXT /RETURN/
	TEXT /RANDOM/
	TEXT /OPEN/
	TEXT /CLOSE/
	TEXT /KILL/
	TEXT /CHAIN/
	TEXT /RESTORE/
	TEXT /READ/
	TEXT /GOTO/
	TEXT /GOSUB/
	TEXT /FOR/
	TEXT /NEXT/
	TEXT /IF/
	TEXT /ON/
	TEXT /!/

	LITBUF,	ZBLOCK 3
	SYMTAB=.+400

	PAGE

