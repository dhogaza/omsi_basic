/RUNTIME SYSTEM FOR PS/8 BASIC

/COPYRIGHT 1972 BY THE OREGON MUSEUM OF SCIENCE & INDUSTRY
/***** D. BACCUS AND G. HOEREN, AUTHORS *****
/ALL RIGHTS RESERVED

	BASE=61				/STARTING BLOCK OF RUN SEG.
	CBASE=40		/STARTING BLOCK OF COMPILER

	RUNLEN=ENDSWP+377&7400%400	/LENGTH OF MAIN CODE
	OPNLEN=OPNEND-OPEN+377&7400%400	/LENGTH OF OPEN OVERLAY
	ERRLEN=ERREND-XER+377&7400%400	/LENGTH OF ERROR OVERLAY


/EAE DEFINITIONS

	DVI=7407
	NMI=7411
	SHL=7413
	ASR=7415
	LSR=7417
	MQL=7421
	MUY=7405
	MQA=7501
	CAM=7621
	SCA=7441
	SCL=7403

/FLOATING POINT INTERPRETER DEFINITIONS

	FEXT=0000
	FNOR=7000
FIXMRI	FADD=0777
FIXMRI	FSUB=1777
FIXMRI	FMUL=2777
FIXMRI	FDIV=3777
FIXMRI	FGET=4777
FIXMRI	FPUT=5777

FIXMRI	FADDI=1377
FIXMRI	FSUBI=2377
FIXMRI	FMULI=3377
FIXMRI	FDIVI=4377
FIXMRI	FGETI=5377
FIXMRI	FPUTI=6377

	FIELD 1		/EXECUTED IN FIELD 0, BUT MUST BE
	NOPUNCH		/LOADED INTO FIELD 1 SO THAT OPEN, CHAIN, AND
	FIELD 0		/ERROR OVERLAYS ARE SAVED LAST BY THE MONITOR.
	ENPUNCH
	BUFBEG=22

	*0
USESW=.+1
SLINK=.+2
GOTEMP=.+3
FILESW=ARRCT
OUPOLD=.
NAM,	ZBLOCK 4

	*7
SBSWP,	CORADR
PACKWD,	BUFBEG+1
IXR,	0
XR1,	0
XR2,	0
CHANL,	BCHANL-1	/PNTR FOR CHANNEL INFO
RNDCHN,	0		/CHANNEL FOR RANDOM I/O INFO
MODE,	0

/***** FLOATING POINT ASSIGNMENTS *****

	*17
FXR,	0

FLAC=.
ACX,	0
AC1,	0
AC2,	0
AC3,	0

FLOP=.
OPX,	0
OP1,	0
OP2,	0

SIGN,	0
FSWCH,	0
KTEMP=.
DECEXP,	0
PTR,	0
NULLS,	0
LEFT,	0
RIGHT,	0
ARRCT,	0
FCOUNT,	0

FLRET,	FBACK
FUNRET,	EVAL2

/***** FLOATING POINT TEMPS *****
/SHARED BY REST OF BASIC FOR ITS TEMPS


FTEMP=.
BUFFER=.
X1,	0000
	0000
	0000

UNTEMP=.
WORD=.+1
X2,	0000
	0000
XFL1,	FXMUL-FREL

TEMP=.
T2=.+1
RSW=.+2
X3,	0000
XFL2,	FXDIV-FREL
	0000

FLTONE,	0001
F2000,	2000
	0000

PIHALF,	0001
	3110
	3755

LENTMP=RNDCHN
SUBTMP=RNDCHN
INSIGN,	0

INCORE,	0
EVALSW,	0
QUOSW,	0
TABSW,	0
ABASE,	0
SBASE,	0
LBASE,	PRLOOP&7600+177
INHNDL,	0
LINE,	0	/CURRENT LINE NUMBER
WARSAW,	FREECORE
LINK,	0
RELOP,	0
UNSTCK,	0
UNCNT,	0
PACNT,	0
PAC,	0
UNWD,	0	/USED BY UNPACK
TABC,	1	/CHARACTER COUNT OF CURRENT LINE
GCK,	0	/CHECK FOR RETURN WITHOUT GOSUB
ADDR,	0
MAXTAB,	106		/COLUMN WIDTH OF CURRENT DEVICE
LINK2,	0
CHAR,	0

/ A FEW CONSTANTS USED IN MAIN AND OVERLAY CODE

KM215,	-215
KM400,
K7400,	7400
K12,	12
K17,	17
K200,	200
K3,	3

/ USED BY OPEN OVERLAY

OINP,	0
GETFUN=JMS I .
	XGETFN

FINT=JMS I .
	FPT

FLOAT=JMS I .
	XFLOAT

NORMALIZE=JMS I .
	FNORM

NEGATE=JMS I .
	NEGAC

PUSH=JMS I .
	XPUSH

PUSHF=JMS I .
	XPUSHF

POP=JMS I .
	XPOP

POPF=JMS I .
	XPOPF

READ=JMS I .
INDEV,	XREAD

TYPE=JMS I .
ODEV,	XTYPE

PACK=JMS I .
PACX,	PAC0

UNPACK=JMS I .
UNPACX,	UNPAC0

NEXT=JMP I .
	START

ERROR=JMS I .
	XERROR

EVAL=JMS I .
	XEVAL

FLUSH=JMS I .
	XFLUSH

SORT=JMS I .
	XSORT

FIXAC1=JMS I .
	XFXAC1

	PAGE
	TLS
	JMP STOP

OSETUP,	0
	TAD I CHANL
	SMA CLA		/CAN WE WRITE ON THIS FILE?
	JMP I OSETUP	/NO OR NOT OPEN
	TAD RANDOM
	DCA PACFLD	/FIELD FOR PACK
	TAD TABC	/SAVE TTY: CHAR COUNTER
	DCA PRTM
	TAD I CHANL
	DCA TABC	/CHAR COUNT FOR DEV
	TAD I CHANL	/CHAR FOR DEV
	DCA PACNT
	TAD I CHANL	/BUFFER POINTER
	DCA PAC
	TAD I CHANL
	DCA OUJMP
	ISZ OSETUP
	JMP I OSETUP

PRTM,	0		/HOLD CHAR COUNT FOR TTY:

CTABLE,	LET		/LET
	PRINTN		/PRINT #N
	PRINT		/PRINT
	START		/DATA
	INPUTN		/INPUT #N
	INPUT		/INPUT
	STOP-1		/STOP
	STOP		/END
KSTOP,	START		/REM
	DIMN		/DIM #N,ETC.
	START		/DIM
	RETURN		/RETURN
KRAN,	RANDOM		/RANDOMIZE
	OPENX		/OPEN
KCLOSE,	CLOSE		/CLOSE
	KILLX		/KILL
	CHAIN		/CHAIN
	RESTORE		/RESTORE
	DREAD		/READ
	GOTO		/GOTO
	GOSUB		/GOSUB
	FOR		/FOR
	NEXTS		/NEXT
	IF		/IF
	ONGO		/ON	A GOTO
	ONGOS		/ON A GOSUB

XERROR,	0
	CLA
	CDF
CHAIN2,	TAD (BASE+RUNLEN+OPNLEN
	TAD BLK
	DCA XERRX+1
	TAD XERRX
	DCA OSETUP
	JMS I INHNDL
	ERREND-XER+177&7600%2	/CNTL WORD FOR READ (YEP!)
XERRX,	4400		/INTO 4400
	0		/BLOCK
	HLT
	JMP I OSETUP

XSPNOR,	0
	SNA
	READ
	TAD (-240
	SNA
	JMP .-3
	TAD [240
	JMP I XSPNOR

DREAD,	TAD (RCHANL-1
	DCA CHANL
	JMP INPUTN+6

	*310
	TAD LINE	/SAVE LINE NUMBER FOR STOP AND ^P
STOP,	CDF 10
	DCA I BLK-1
	CDF
	JMS CLOALL
STOP2,	JMS I INHNDL	/GO TO EDIT
	3200		/READ 32 PAGES
	0		/INTO 0
BLK,	0
	HLT
	//////

        IFDEF DEBUG <
	LAS
	SMA CLA
	HLT		/FOR DEBUGGING>

	CDF 10		/ENTRY FROM COMPILE
	TAD I K3
	DCA INHNDL
	TAD I (5
	IAC
	DCA BLK		/BLOCK NUMBER OF EDIT
	JMP LSWAPL	/SET UP SYMBOL TABLE
START,	CDF 10		/START OF STATEMENT
	TAD I PACKWD
	DCA LINE	/LINE NUMBER
	TAD I PACKWD
	CDF
	DCA WORD
	JMS CHCK	/CHECK FOR ^O, ^P, ^C
	TAD WORD
	AND [37
	TAD (JMP I CTABLE
	DCA .+1
	HLT

RANDOM,	CDF 10
	TAD I (15
	CDF
	DCA RNDM+1
	TAD KSTOP
	DCA KRAN
	NEXT

/ STUFF USED BY OPEN OVERLAY, NO ROOM ON PAGE ZERO

OSTART,	0
PPNT,	0
MAXBUF,	0
	PAGE
	/TAB FUNCTION

TABFN,	FIXAC1	/GET THE ARGUMENT
TABERR,	 ERROR		/LARGER THAN 2^13
	JMS TAB		/DO THE SPACES THING
	ISZ TABSW	/SET SWITCH SO THAT PRINT
	JMP I FLRET	/WILL NOT ATTEMPT TO OUTPUT VALUE

	/CHR$ FUNCTION

CHR,	TAD [CHRFUG
	PUSH
	PUSH
	FIXAC1
	JMP TABERR
	DCA OP2
	POPF
	CLA CMA
	JMP UNSET1

	/ASCII FUNCTION

ASCII,	UNPACK
KSTOPM,	STOP-1
	AND [177
	DCA LENTMP
	TAD LINK2
	DCA WARSAW
ASCI2,	PUSHF
	TAD LENTMP
ASCI3,	FLOAT
	JMP I (EVAL1

	/LEN FUNCTION

LEN,	DCA LENTMP
	UNPACK
	JMP ASCI2
	ISZ LENTMP
	CLA
	JMP LEN+1

	/POS FUNCTION

POS,	FIXAC1
KPPNT,	PPNT
	SNA
	JMP TERMIN
	JMS OCHECK
	TAD I CHANL
	SMA CLA
POSERR,	ERROR
	TAD I CHANL
	JMP ASCI3
TERMIN,	TAD TABC
	JMP ASCI3

TAB,	0
	CIA
	DCA TABTMP
	TAD TABTMP
	TAD MAXTAB
	SPA SNA CLA
	JMP CRTAB
TABGO,	TAD TABTMP
	TAD TABC
	SMA CLA
	JMP I TAB
	TAD [240
	TYPE
	JMP TABGO

CRTAB,	JMS CRLF
	JMP I TAB

CHCK,	0		/CHECK FOR ^C, ^O, AND ^P
	KSF
	JMP I CHCK
	TAD K200
	KRS
	SORT
	-203; JMP I K200	/^C
	-220; JMP I KSTOPM/^P
	-217; STL RAR	/^O
	TAD TYPSW
	DCA TYPSW
	KCC
	0		/NEEDED TO STOP SORT
	JMP I CHCK

XPUSH,	0
	ISZ WARSAW
	DCA I WARSAW
	JMS PSHCHK
	JMP I XPUSH

XPOP,	0
	TAD I WARSAW
	DCA XPUSH
	CLA CMA
	TAD WARSAW
	DCA WARSAW
	TAD XPUSH
	JMP I XPOP

PSHCHK,	0
	TAD WARSAW
	CIA
	TAD [177
	TAD I KPPNT
	SPA SNA CLA
QPUSH,	 ERROR
	JMP I PSHCHK

XPUSHF,	0
	ISZ EVALSW
	SKP
	JMP I XPUSHF
	ISZ WARSAW
	TAD K3
	JMS PSHCHK
	TAD ACX
	DCA I WARSAW
	ISZ WARSAW
	TAD AC1
	DCA I WARSAW
	ISZ WARSAW
	TAD AC2
	DCA I WARSAW
	JMP I XPUSHF

CHRFUG,	TAD UNWD
	JMP ICHLV+1

KFUDGE,	TAD KTEMP
	JMP ICHLV+1

TABTMP,	0

	PAGE
INPUTN,	EVAL
	FIXAC1	/GET CHANL NUMBER
	CMA		/CHANNEL WAY OUT (OF RANGE)
	SNA
	JMP INPUT	/INPUT #0
	JMS OCHECK	/COMPUTE ADDR OF CHANL INFO
	CMA
	DCA UNSTCK	/BUFFER IS ONE STRING LONG
	TAD I CHANL
	ISZ CHANL	/CHAR COUNT
	RTL CLL
	SMA CLA
QNOT,	ERROR		/NOT OPEN FOR INPUT
	TAD I CHANL	/-CHARS
	DCA SUNCNT
	TAD I CHANL
	DCA UNWD	/BUFFER
	TAD [CDF 10
	DCA UNFLD
	TAD I CHANL
	DCA ICHLV
	DCA ICHLV+4	/FUDGE UNPACK
	TAD (INUN-XREAD
INPUT,	TAD [XREAD
	DCA INDEV
	EVAL
	ISZ MODE
	JMP INP2
INGO,	JMS XDEL
	JMP ICK
	TAD CHAR	/GDI
	PACK
	JMP STOVR
	JMP INGO
ICK,	PACK
	JMP .+3
	SKP
STOVR,	JMS STROVR
ICKGO,	TAD ADDR
	AND [700
	SZA CLA
	JMP INPUT+2
INEND,	DCA RLSW	/IGNORE EXTRA INPUT
	TAD INDEV	/INPUT FROM FILE?
	TAD (-INUN
	SZA CLA
	NEXT		/NO
	CLA CLL CMA RTL
	TAD CHANL
	DCA CHANL
	TAD UNCNT
	DCA I CHANL	/-CHARS
	TAD UNWD
	DCA I CHANL	/BUFFER
	TAD ICHLV
	DCA I CHANL
	TAD (UNXT&177+5200
	DCA ICHLV+4	/REPLACE FUDGE
	NEXT		/NOW WE CAN CONTINUE


QUOTE,	CLA CLL CML RAR
	TAD QUOSW
	DCA QUOSW

	IFNZRO .&7000 <
	JMP .+2		/SHOULD NOT ASSEMBLE IF THIS
			/CODE IS NOT MOVED>

XDEL,	0
	SNA
	READ
	TAD QUOSW
	SORT
DELST,	-"";JMP QUOTE
	-4000-"";JMP QUOTE
	-215;JMP XDEL2
	-",;JMP XDEL2
	-2000-215;	JMP XDEL2
	-4000-215;
QUOERR,	 ERROR		/WHICH RETURNS TO XDEL2
	0
	ISZ XDEL
	JMP I XDEL
XDEL2,	DCA QUOSW
	JMP I XDEL


PI,	PUSHF
	CLA CML CLL RTL
	DCA FLAC
	TAD PIHALF+1
	DCA FLAC+1
	TAD PIHALF+2
	DCA FLAC+2
	JMP I FLRET


INP2,	TAD WARSAW
	DCA LINK
INP3,	JMS XSPNOR
	JMS XDEL
	JMP .-2		/IGNORE NULL CRAP
/***KLUDGE*** TO BE REMOVED ONE DAY IN THE
/BRIGHT FUTURE OF PS/8 BASIC
	JMS FLINTP
	POP
	JMS STASH
	TAD CHAR
	JMS XDEL
	JMP ICKGO
	TAD LINK
	DCA WARSAW
	JMS XDEL
TYPER,	 ERROR		/INPUT OF WRONG FORMAT
	JMP .-2

FILKLG,	JMS FILADR
	CLA
	JMS I [WBIN
	POP
	JMP DCAXR1

	PAGE
	/FOR I=A TO B STEP C

FOR,	CDF 10
	TAD I PACKWD
	TAD SBASE
	DCA CHANL
	EVAL		/EVALUATE A,B,C
	TAD AC1
	SNA CLA
STEP0,	 ERROR
	CDF 10
	FINT
	FPUTI PACKWD	/SAVE STEP
	FEXT
	ISZ PACKWD
	ISZ PACKWD
	ISZ PACKWD
	POPF
	CDF 10
	FINT
	FPUTI PACKWD	/SAVE LIMIT
	FEXT
	POPF
	JMP NCHECK

NEXTS,	CDF 10
	TAD I PACKWD
	TAD SBASE	/GENERATE ADDR OF VARIABLE
	DCA CHANL
	TAD I PACKWD
	DCA PACKWD	/ADDR OF STEP IN 'FOR' STATEMENT
	CDF 10
	FINT
	FGETI CHANL	/GET LOOP VARIABLE
	FADDI PACKWD	/ADD STEP
	FEXT
	ISZ PACKWD
	ISZ PACKWD
	ISZ PACKWD

NCHECK,	CLA CMA
	TAD PACKWD
	DCA TEMP	/POINTER TO STEP VARIABLE
	CDF 10
	TAD I TEMP
	SNA CLA
NXTFOR,	 ERROR		/UNINITIALIZED FOR LOOP
	TAD ACX
	CLL CIA
	TAD I PACKWD	/COMPARE EXPONENTS
	SZA		/EQUAL?
	JMP FORCMP	/N0--PICK ONE OPERAND TO TEST

	STL RAR
	TAD I PACKWD
	DCA OP1		/TEMPORARY
	STL RAR
	TAD AC1		/CONVERTS BOTH TO EXCESS 2048
	STL CIA		/THEN DOES LOGICAL COMPARE
	TAD OP1
	SZA CLA		/HIGH ORDER MANTISSAE EQUAL?
	JMP FORTST	/NO--TEST THE DIFFERENCE DIRECTLY

	TAD AC2
	STL CIA
	TAD I PACKWD
	SZA CLA		/STILL ZERO?
	JMP FORTST+1	/NO--DON'T BUMP PACKWD NOW

NCONT,	ISZ PACKWD	/SKIP OVER GOTO ADDRESS
	TAD ACX		/STORE NEW LOOP VARIABLE
	DCA I CHANL	/DATA FIELD STILL 10
	TAD AC1
	DCA I CHANL
	TAD AC2
	DCA I CHANL
	NEXT		/CONTINUE

FORCMP,	RAL		/PRESUMES OVERFLOW IMPOSSIBLE
	CLA
	TAD I PACKWD	/GET HI ORDER OF LOOP LIMIT
	SNL		/LINK REFLECTS PREVIOUS COMPARE
	JMP .+3		/LIMX>VARX--TEST LIMIT XOR STEP
	CLA STL RAR	/VARX>LIMX--TEST VAR NOTXOR STEP
	TAD AC1
	RAL		/MOVE SIGN INTO LINK FOR NEXT TEST
FORTST,	ISZ PACKWD	/BUMP PAST LOW ORDER OF LIMIT
	CLA RAR		/GENERATE 4000 IF VARIABLE>LIMIT
	TAD I TEMP	/FLIP SIGN IF NEGATIVE STEP
	SMA CLA
	JMP NCONT
	DCA I TEMP	/RESET STEP TO ZERO ON WAY OUT
	JMP GOTO

XTYPE,	0
	TAD TYPSW
	ISZ TABC	/WILL SKP AFTER 4096 TIMES
	TSF
	JMP .-1
	SMA
	TLS
	AND [377
	TAD KM215
	SNA CLA
	DCA TABC
TEXIT,	JMS CHCK
	JMP I XTYPE
TYPSW,	0

LINKER,	JMS DOLINK
	JMP I (EVAL2-2

DOLINK,	0
	TAD LINK
	PUSH
	TAD WARSAW
	DCA LINK
	JMP I DOLINK

XGETFN,	0
	TAD INCORE
	SMA CLA
	JMP I XGETFN
	DCA INCORE
	IFNZRO FSIN&200 <IT, XYZ
WONT,	XYZ
SWAP,	XYZ>
	TAD (FSIN+377&7400%400+BASE
	JMS GETPGE
	JMP I XGETFN


CRLF,	0
	TAD [215
	TYPE
	TAD (212
	TYPE
	JMP I CRLF

	PAGE
ONCOMN,	0
	TAD WORD
	RAR CLL; RTR; RTR
	AND [177
	TAD PACKWD
	DCA GOTEMP
	EVAL
	FIXAC1
	JMP GONEXT
	SPA SNA CLA
	JMP GONEXT
	CMA CLA
	TAD AC1
	TAD PACKWD
	DCA PACKWD
	IAC
	TAD PACKWD
	CIA
	TAD GOTEMP
	SMA SZA CLA
	JMP I ONCOMN
GONEXT,	CLA CMA
	TAD GOTEMP
	JMP GOTO77

ONGO,	JMS ONCOMN
	JMP GOTO
ONGOS,	JMS ONCOMN
	CLA CMA		/ANOTHER G. D. I.
	TAD GOTEMP
	JMP .+3
GOSUB,	IAC
	TAD PACKWD
	ISZ GCK
	PUSH		/RETURN LOC
GOTO,	CDF 10
	TAD I PACKWD
GOTO77,	DCA PACKWD
	NEXT

CLOSE,	TAD WORD
	TAD (KCLOSE-CTABLE+40^7777
	SNA CLA
	JMP CALL
	EVAL
	SKP
OLAG,	POPF		/FOR MORE THAN ONE AT A TIME
	FIXAC1
	CMA		/INTEGER TOO LARGE TO FIX
	JMS ECLOSE
	TAD WARSAW
	CIA
	TAD LINK
	SZA CLA
	JMP OLAG	/ANOTHER ONE
	NEXT		/ALL DONE

ECLOSE,	0		/CLOSE ONE CHANL
	SNA
	JMP I ECLOSE
	JMS OCHECK	/COMPUTE ADDR OF CHANL
	TAD CHANL
	DCA XR2
	TAD I XR2
	RAL
	SPA
	JMP CLSBIN
	RAR
	AND K17
	DCA GOTEMP
	JMS OSETUP
	JMP QCL+1	/INPUT OR NOT OPEN
	TAD (232
	JMS PPACK
	JMS PPACK	/FIX FOR ^Z BUB
	TAD PACNT
	TAD (-7201	/FILL BUFFER WITH NULLS
	SZA CLA
	JMP .-4
	TAD CHANL
	TAD L4
	DCA CL1		/PNTR TO NAME-1
	TAD I CL1
	DCA CL2		/BLOCKS USED
	ISZ CL1
	TAD GOTEMP	/DEVICE #
	CIF 10
	JMS I [7700
L4,	4		/CLOSE
CL1,	0		/NAME
CL2,	0		/LENGTH
QCL,	 ERROR
	CLA IAC		/OSETUP DOES NOT CLEAR AC
	TAD TEMP
	JMS OCHECK
	DCA I CHANL
	JMP I ECLOSE

CALL,	JMS CLOALL
	NEXT

CLOALL,	0
	TAD (-4
	DCA ONCOMN
	TAD ONCOMN
	CIA
	JMS ECLOSE
	ISZ ONCOMN
	JMP .-4
	JMP I CLOALL

RETURN,	TAD GCK		/RETURN STATEMENT
	SNA
QRET,	 ERROR		/RETURN WITHOUT GOSUB
	TAD [-1
	DCA GCK
	POP
	DCA PACKWD
	NEXT

STROVR,	0
	 ERROR		/"STRING OVERFLOW"
	JMP I STROVR

	PAGE
RCHANL,	1001	/READ FIELD 1, 2 PAGES
	7177	/CHR POS - RESTORE CONSTANT
	-601	/CHARS TO FILL BUFFER
	7245	/BUFFER
	ICHAR1
	7607	/HNDLR ENTRY
	41	/FIRST BLOCK

RESTORE,TAD RCHANL+6
	TAD [-41
	SNA CLA		/IS FIRST BLOCK IN CORE?
	JMP RIN		/YES, JUST RESET POINTER
	JMS I RCHANL+5	/7607
	210		/2 PAGES FIELD 1
	7245		/BUFFER
	41		/FIRST BLOCK OF DATA
QDEV1,	 ERROR
RIN,	TAD RCHANL+1
	DCA RCHANL+2	/-601 CHARS IN BUFFER
	TAD RESTORE+6	/BUFFER - 7200
	DCA RCHANL+3
	TAD [ICHAR1
	DCA RCHANL+4
	NEXT

PPACK,	0
	ISZ TABC
	DCA XR1
	TAD XR1
	JMS PAC0
K212,	212
	TAD PACNT
	SNA CLA
	JMP PPACK2
PPACK1,	TAD XR1
	TAD KM215
	SNA CLA
	DCA TABC
	JMP I PPACK

PPACK2,	TAD I CHANL	/HNDLR ENTRY
	DCA GETPG2
	TAD CHANL
	DCA XR2
	TAD I CHANL
	ISZ I XR2	/INC BLK COUNT
	DCA OFUNCT+2	/BLK #
	ISZ I CHANL
	SKP
QDF,	 ERROR		/FILE TOO LARGE
	ISZ I CHANL	/ONE MORE BLK
	TAD (-4
	TAD CHANL
	DCA CHANL
	TAD [7200
	DCA PACNT
	TAD PAC		/BUFFER PNTR
	TAD KM400
	DCA PAC
	TAD PAC
	DCA OFUNCT+1	/BUFFER
	JMS I GETPG2	/CALL HNDLR
OFUNCT,	4210		/WRITE 2 PAGES FIELD 1
	0		/BUFFER
	0		/BLOCK
QDEV2,	 ERROR
	JMP PPACK1


LET,	PUSH
	EVAL
	ISZ MODE
	JMP LGO

LGO2,	UNPACK
	JMP LSTOP
	PACK
	JMP STROFR
	JMP LGO2

STROFR,	JMS STROVR
	NEXT

LSTOP,	CLA CMA
	TAD WARSAW
	DCA WARSAW
	PACK
	NEXT
	NEXT		/ZERO FILL

LGO,	POP
	SNA
LNXT,	NEXT
	JMS STASH
	JMP LGO
	

CHAIN,	TAD INCORE
	SZA CLA
	JMP I (CHAINB-OREL
	TAD (BASE+RUNLEN
	JMS GETPGE
	JMP I (CHAINB-OREL


BINSTO,	JMS I [WBIN
	CLA CMA
	DCA I TEMP
	POP
	JMP STASH+1

GETPGE,	0
	TAD BLK
	DCA .+4
	JMS I INHNDL
	OPNEND-OPEN+177&7600%2
	FSIN
GETPG2,	0
	HLT
	JMP I GETPGE

STASH,	0
	CMA
	SNA
	JMP BINSTO
	CMA
	DCA FXR
	CDF 10
	TAD ACX
	DCA I FXR
	TAD AC1
	DCA I FXR
	TAD AC2
	DCA I FXR
	CDF
	JMP I STASH

	PAGE
/INPUT ONE LINE AND PROCESS RUB OUT, ^U, LF, CR, AND BACK ARROW

XREAD,	0
RLSW,	0		/EITHER 0 (NOP) OR SZA CLA (SKP)
	JMP RLINE	/READ NEW LINE
	JMS RGET	/GET NEXT CHARACTER
	DCA CHAR
	TAD CHAR
	TAD KM215
	SNA CLA
	DCA RLSW	/RLSW = 0 WHEN CR IS READ
	TAD CHAR
	JMP I XREAD

RLINE,	TAD LSKP
	DCA RLSW	/DON'T COME HERE NEXT TIME
	DCA TYPSW	/MAKE SURE THAT IT PRINTS!
	TAD ["?
	TYPE		/DO THE OBVIOUS
	TAD [240
CTRLU1,	TYPE
	DCA RSW		/RUBOUT SWITCH
	TAD OSTART	/BUFFER STARTS AT END OF OBJECT
	DCA IXR		/PROGRAM IN FIELD 1
RCHR,	KSF
	JMP .-1
	JMS CHCK	/CHECK FOR ^C, ^P, AND ^O
	KRB
	SORT
	-337;	JMP BACK	/BACK ARROW
	-225;	JMP CTRLU	/^U
	-212;	JMP LFL		/LINE FEED
	-377;	JMP RO		/RUB OUT
	0
	JMS SLASH	/PRINT CLOSING SLASH IF NECESSARY
	TAD MAXBUF
	CIA
	TAD IXR
	SNA CLA		/IS THERE ROOM FOR ANOTHER CHAR?
	 JMP CTRLU	/LINE TOO LONG
	TAD RELOP
	TYPE		/ECHO CHAR
	TAD RELOP
	CDF 10
	DCA I IXR	/STORE IT IN BUFFER
	CDF
	TAD RELOP
	TAD KM215
LSKP,	SZA CLA		/CR?
	JMP RCHR	/NO, READ NEXT CHAR
	TAD OSTART	/YES, SET IXR TO START OF LINE
	DCA IXR
	TAD (212
	TYPE
	JMP RLSW+2	/AND EXIT

CTRLU,	TAD ("^
	TYPE
	TAD ("U
	TYPE
	JMS CRLF
	JMP CTRLU1+1

RO,	JMS ROCHK
	CMA
	JMS SLASH	/PRINT "\"
	ISZ RSW
	CMA
	TAD IXR
	DCA IXR
	JMS RGET	/GET CHARACTER
BACK1,	TYPE		/TYPE IT
	CMA
	TAD IXR
	JMP RCHR-1

SLASH,	0
	TAD RSW
	SNA CLA
	JMP .+3
	TAD ("\
	TYPE
	DCA RSW
	JMP I SLASH

RGET,	0
	CDF 10
	TAD I IXR
	CDF
	JMP I RGET

BACK,	JMS ROCHK	/IS THERE SOMETHING TO ERASE?
	TAD RELOP	/BACK ARROW
	JMP BACK1

ROCHK,	0		/IS THERE ANYTHING TO RUB OUT?
	TAD IXR
	CIA
	TAD OSTART
	SZA CLA
	JMP I ROCHK
LFL,	JMS SLASH	/PRINT CLOSING "\" IF NECESSARY
	JMS CRLF
	TAD IXR
	DCA WORD
	TAD OSTART
	DCA IXR
LFL1,	TAD WORD
	CIA
	TAD IXR
	SNA CLA
	JMP RCHR	/DONE
	JMS RGET	/GET CHAR
	TYPE
	JMP LFL1

XSORT,	0
	DCA RELOP
	TAD I XSORT
	ISZ XSORT
	SZA
	TAD RELOP
	SZA CLA
	JMP .-5
	JMP I XSORT	/CHAR FOUND IN LIST

	PAGE
STRARG,	0
	DCA TEMP
	TAD LINK
	DCA SLINK
	JMP .+3
	TAD I SLINK
	DCA SLINK
	ISZ TEMP
	JMP .-3
	TAD WARSAW
	DCA T2
	TAD SLINK
	DCA WARSAW
	TAD I SLINK
	CMA
	TAD WARSAW
	RTR CLL CML CMA
	DCA UNSTCK
	CLA CMA
	TAD WARSAW
	DCA WARSAW
	CLA CMA
	DCA UNCNT
	UNPACK
	JMP STREX
	DCA TEMP
STRKLG,	TAD (-4
	TAD XR1
	DCA XR1
	TAD ICHLV
	DCA I XR1
	TAD UNFLD
	DCA I XR1
	TAD UNCNT
	IAC
	SZA
	ISZ STRARG
	DCA I XR1
	TAD UNWD
	DCA I XR1
STREX,	TAD T2
	DCA WARSAW
	CLA CMA
	DCA UNCNT
	TAD TEMP
	JMP I STRARG


UNPAC0,	0
	ISZ UNCNT
	JMP UNFLD
UNXT,	TAD (UNPAC0
	DCA UNPACX
	ISZ UNSTCK
	JMP .+4
	TAD LINK2
	DCA WARSAW
	JMP I UNPAC0	/EXIT-END OF STRING EXPR.
	JMS GETSTUF
UNFLD,	HLT		/BETTER NEVER...
	JMP I ICHLV

ICHAR1,	TAD I UNWD	/UNPACK LIKE ANYBODY ELSE DOES
	JMS ICHLV
	ISZ UNWD
	TAD I UNWD
	JMS ICHLV

ICHAR3,	CLA CMA
	TAD UNWD
	DCA UNTEMP
	TAD I UNTEMP
	AND K7400
	DCA UNTEMP
	TAD I UNWD
	ISZ UNWD
	AND K7400
	RTR CLL;RTR
	TAD UNTEMP
	RTR;RTR
	JMS ICHLV
ICH,	JMP ICHAR1

ICHLV,	0
	AND [177
	CDF		/CLEAR FIELD IF SET
	SNA
	JMP UNXT	/PICK UP NEXT STRING ON NULL
	TAD K200
	ISZ UNPAC0
	JMP I UNPAC0

UNSET,	ISZ FILESW
	JMS I SBSWP2
	JMP UNSETF
	TAD [ICHAR1
	PUSH
	TAD [CDF 10
	PUSH
	TAD X2+2
UNSET1,	PUSH
	TAD OP2
	PUSH
UNSET2,	TAD UNSTCK
	RAL CLL
	RAL CLL
	TAD WARSAW
	DCA LINK2
	CLA CMA
	TAD UNSTCK
	DCA UNSTCK
	JMP I FLRET

SBSWP2,	STRCOR

FILUN3,	FILUN2


GETSTUF,	0
	TAD UNSTCK
	RTL CLL
	TAD WARSAW
	TAD [-1
	DCA XR1
	TAD I XR1
	DCA ICHLV
	TAD I XR1
	DCA UNFLD
	TAD I XR1
	DCA UNCNT
	TAD I XR1
	DCA UNWD
	JMP I GETSTUF
	PAGE
STRELAT,	JMS DOLINK
	CLA CMA
	JMS STRARG
	CLA
	CIA
	DCA RSW
	CLA CMA  RAL CLL
	JMS STRARG
	CLA
	TAD RSW
	SZA
	JMP RELAT3
	TAD RSW
	SZA CLA
	JMP STRELAT+1

RELAT3,	DCA FLAC+1
	CLA CMA RAL CLL
	FLUSH
RELAT2,	TAD RELOP
	TAD (SKPL-5	/WHEW!
	DCA ADDR
	TAD I ADDR
	DCA RSKP
	TAD FLAC+1
RSKP,	HLT
	IAC
	DCA FLAC
	TAD FLAC
	SZA CLA
	CLL CML CLA RTR
	DCA AC1
	DCA AC2
	JMP I FUNRET
SKPL,	SNA CLA		/=
	SZA CLA		/<>
	SPA CLA		/<
	SZA SMA CLA	/>
	SPA SNA CLA	/<=
	SMA CLA		/>=

PAC0,	0		/CHAR MUST BE ONLY 8 BITS LONG!!!
	DCA FUNRET	/STORE CHAR TEMPORARILY
PACFLD,	HLT		/PLEASE DON'T!
	TAD PACNT
	SNA CLA
	JMP OCOUT
	TAD I PAC
	AND K7400
	TAD FUNRET
	ISZ PAC0
	ISZ OUJMP
OUJMP,	JMP .
	JMP OCHAR1
	JMP OCHAR2
	CLA CMA
	TAD PAC
	DCA OUPOLD
	TAD FUNRET
	RTL;RTL
	DCA FUNRET
	TAD FUNRET
	AND K7400
	DCA RNDCHN
	TAD I OUPOLD
	AND [377
	TAD RNDCHN
	DCA I OUPOLD
	TAD FUNRET
	RTL;RTL
	AND K7400
	DCA RNDCHN
	TAD I PAC
	AND [377
	TAD RNDCHN
	DCA I PAC
OCOUT,	TAD [JMP OUJMP
	DCA OUJMP
	JMP PACOUT

OCHAR1,	DCA I PAC
PACOUT,	ISZ PAC
	CDF
	ISZ PACNT
K400,	400
	JMP I PAC0

OCHAR2,	DCA I PAC
	JMP PACOUT+1

PACSET,	ISZ FILESW
	JMS I SBSWP1
	JMP FILPAC
	TAD X2+2
	DCA PACNT
	TAD OP2
	DCA PAC
PCSET2,	TAD (PAC0
	DCA PACX
	TAD [CDF 10
	DCA PACFLD
	TAD [JMP OUJMP
	DCA OUJMP
	JMP I FLRET

SBSWP1,	STRCOR
FILPAC,	JMS STRFIL
	POP
	DCA FXR
	TAD FXR
	DCA FILP2
	POP
	DCA FILP1
	POP
	TAD K400
	DCA PAC
	TAD I FXR
	TAD K400
	DCA PACEND
	TAD X2+2
	DCA PACNT
	TAD (RNDPAC-PAC0
	JMP PCSET2
	PAGE
FILUN2,	TAD [CDF 10
	DCA UNFLD
	TAD ICHLV
	DCA UNTMP2
	TAD ICHLV
	TAD K12
	DCA UNTMP1
	TAD I UNTMP1
	DCA UNTMP1
	TAD (RNDUN
	DCA UNPACX
	TAD UNTMP2
	DCA XR1
	TAD I XR1
	CIA
	TAD KM400
	DCA UNEND
	TAD [ICHAR1
	DCA ICHLV
	TAD UNPAC0
	DCA RNDUN
	JMP RNDUN1

UNTMP1,	0
UNTMP2,	0
UNEND,	0

RNDUN,	0
	TAD UNWD
	TAD UNEND
	SPA CLA
	JMP RNDUN2
	TAD KM400
	TAD UNWD
	DCA UNWD
RNDUN1,	ISZ UNTMP1
RNDUN2,	CMA
	TAD UNTMP1
	PUSH
	TAD UNTMP2
	PUSH
	JMS I [WBIN
	JMS UNPAC0
	JMP I RNDUN
	ISZ RNDUN
	JMP I RNDUN

XPOPF,	0
	CLA CMA CLL
	TAD EVALSW
	DCA EVALSW
	SNL
	JMP I XPOPF
	CLA CMA CLL RTL
	TAD WARSAW
	DCA WARSAW
	TAD WARSAW
	DCA FXR
	TAD I FXR
	DCA ACX
	TAD I FXR
	DCA AC1
	TAD I FXR
POPFXT,	DCA AC2
	JMP I XPOPF


UNSETF,	ISZ WARSAW
	TAD WARSAW
	DCA RNDTMP
	JMS STRFIL
	TAD I WARSAW
	DCA I RNDTMP
	ISZ RNDTMP
	TAD I WARSAW
	TAD K12
	DCA TEMP
	TAD I RNDTMP
	DCA I WARSAW
	TAD (FILUN3&177+5600
	DCA I RNDTMP
	ISZ RNDTMP
	TAD I RNDTMP
	DCA I TEMP
	CMA
	TAD X2+2
	DCA I RNDTMP
	JMP UNSET2

RNDPAC,	0
	DCA RNDUN
	TAD PAC
	CIA
	TAD PACEND
	SMA SZA CLA
	JMP RNDP2
	TAD PAC
	TAD KM400
	DCA PAC
	ISZ FILP1
RNDP2,	CMA
	TAD FILP1
	PUSH
	TAD FILP2
	PUSH
	JMS I [WBIN
	TAD RNDUN
	JMS PAC0
	JMP I RNDPAC
	CLA CMA
	DCA I TEMP	/SAY THAT WE WROTE IN THIS BLOCK
	ISZ RNDPAC
	JMP I RNDPAC

FILP1,	0
FILP2,	0
PACEND,	0


IF,	CDF 10
	TAD I PACKWD
	DCA RNDUN		/ADDR IF FALSE
	EVAL
	TAD FLAC+1
	SZA CLA
	NEXT		/TRUE
	TAD RNDUN
	DCA PACKWD
	NEXT		/FALSE - GOTO NEXT STATEMENT

RNDTMP=RNDUN


	PAGE
/EXECUTOR LIST

	PACSET
	LSADDR
	MICRO
	LADDR
	UNSET
	LDOPSB
	LIT
	LDOP

XEVAL,	0
	CDF
	TAD WARSAW
	DCA LINK
	CLA CMA
	DCA EVALSW
EVAL1,	CLA CMA
	DCA UNCNT
	CLA CMA
	DCA UNSTCK
EVAL2,	DCA FILESW	/RESET FILE INDICATOR
	TAD (EVAL2
	DCA FUNRET
	DCA AC3		/CLEAR YOU KNOW WHO!
	TAD (EVAL2
	DCA FLRET

	CDF 10
	TAD I PACKWD
	CDF
	DCA WORD
	TAD WORD
	AND [777
	DCA ADDR
	TAD WORD
	AND [7000
	STL CMA RTL
	RTL
	TAD EJUMP
	DCA EVLJMP
EVLJMP,	HLT


	CLA CMA
EXIT,	DCA MODE
	TAD (FPT+1
	DCA FLRET
EJUMP,	JMP I XEVAL
RELATE,	TAD ADDR
	DCA RELOP
	IAC
	TAD UNSTCK
	SZA CLA
	JMP STRELAT
	TAD (RELAT2
	DCA FLRET
	IAC
	DCA ADDR


MICRO,	TAD ADDR
	AND (77
	TAD [-5
	SMA
	JMP NODIDL
	DCA ADDR
	TAD ACX
	DCA OPX
	TAD AC1
	DCA OP1
	TAD AC2
	DCA OP2
	POPF
	TAD ADDR
NODIDL,	TAD (TAD MICROL+5
	DCA .+1
	HLT
	DCA TEMP
	TAD TEMP
	TAD (-FSIN	/SWAP IN FUNCTIONS?
	CLL CML
	TAD (-SWPEND+FSIN
	SZL CLA
	GETFUN
	JMP I TEMP	/HOP TO IT
MICROL,	FLADD
	FLSUB
FLSWP1,	FLMUL
FLSWP3,	FLDIV
	FLPOW
	RELATE
	RELATE
	RELATE
	RELATE
	RELATE
	RELATE
	EXIT
	EXIT-1
	FNEG
	FSQT
	FITR
	FSIN
	FCOS
	FTAN
	FABS
	FRAN
	FEXP
	FLOG
	FSGN
	FATN
	CHR
	PI
	LEN
	TABFN
	POS
	ASCII
	MID
	PLIT
	LINKER
	SETFIL
	SETQUO
	EVAL1

SETQUO,	CLA CLL CML RTR
	DCA QUOSW
	JMP I FLRET

	PAGE
	/FLUSH SUBROUTINE ARGUMENTS OFF
	/THE TOP OF THE STACK.
	/USED BY STRING RELATE AND USER
	/FUNCTIONS TO UNLINK LINKED STRINGS

DOSV=.

XFLUSH,	0
	DCA TEMP	/ENTER WITH # OF ARGS IN AC
	TAD LINK
	DCA WARSAW
	TAD I WARSAW
	DCA WARSAW
	ISZ TEMP
	JMP .-3
	TAD WARSAW
	DCA LINK
	JMP I XFLUSH


KILLX,	JMS GOPEN
	JMP I (KILL-OREL

OPENX,	JMS GOPEN
	JMP I (OPEN-OREL

DIMN,	JMS GOPEN
	JMP I (DIMNUM-OREL

GOPEN,	0
	TAD INCORE
	SZA CLA
	JMP I GOPEN
	CLA CMA
	DCA INCORE
	TAD (BASE+RUNLEN
	JMS GETPGE
	JMP I GOPEN


DOIT,	0
	CLA CMA
	DCA PRSW
	TAD UNSTCK
	DCA DOSV
	TAD USESW
	SZA
	JMP DOUSE
	ISZ MODE
	JMP DONUM
	UNPACK
FLBCK,	JMP I DOIT
	TYPE
	JMP .-3
DONUM,	TAD TABSW
	SNA CLA
	JMS FLOUTP
	JMP I DOIT

PRSW,	0
DOUSE,	RAR
	SZA CLA
	JMP DOUSE3
	ISZ MODE
	JMP FRMNUM
FRMSTR,	JMS USECHR
	JMP DOUSE2
	SORT
	-"!;JMP ONECHR
	-"\;JMP MNYCHR;0
	TAD RELOP
	TYPE
	JMP FRMSTR

MNYEND,	TAD FXR
	IAC

ONECHR,	CMA
MNYC2,	DCA RELOP
	TAD DOSV
	DCA UNSTCK
	CMA
	DCA UNCNT
MNYC3,	UNPACK
	JMP BFILL	/RAN OUT OF CHARS
	TYPE
	ISZ RELOP	/OUT OF FORMAT?
	JMP MNYC3	/NOPE,DO SOME MORE
	JMP DOUSE3	/WE IS DONE!

BFILL,	TAD [240
	TYPE
	ISZ RELOP	/PAD THE LINE WITH BLANKS
	JMP .-3
	JMP DOUSE3	/WE IS DONE SOME MORE!

MNYCHR,	DCA FXR
	JMS USECHR
BKSLSH,	"\
	SORT
	-"\;JMP MNYEND
	-240;JMP MNYSPC;0
	TAD BKSLSH
	TYPE		/FOUND A NON FORMAT CHAR
	TAD FXR	/ECHO AS MANY SPACES AS
	CMA		/HE GAVE US
	DCA FXR
	JMP .+3		/IT MIGHT BE ZERO SPACES
	TAD [240
	TYPE		/(SIGH)
	ISZ FXR
	JMP .-3
	TAD CHAR	/END OF LINE?
	SZA		/DONE IF ZERO
	JMP FRMSTR+1	/IT MIGHT BE A "!"


DOUSE2,	TAD CHAR
	SZA
	TYPE
DOUSE3,	TAD LINK
	DCA WARSAW
	JMP I DOIT

MNYSPC,	ISZ FXR	/ANOTHER SPACE
	JMP MNYCHR+1


FRMNUM,	JMS UNPK
	JMS USING
	SKP
	JMP DOUSE2
	TAD CHAR
	SNA
	JMP DOUSE2
	TYPE
	JMP FRMNUM


	PAGE
LSADDR,	ISZ FILESW
	JMS CORADR
	JMS I [FILADR	/**PAGE ZERO FOR NOW ONLY**
	JMP .+3
LADDR,	TAD SBASE
	TAD ADDR
	PUSH
	JMP I FLRET

SUBS,	0
	CDF 10
	TAD SBASE
	TAD ADDR
	DCA XR1
	TAD I XR1
	SPA
	JMP TWOSUBS
	DCA SUBTMP
	TAD KM30
	FIXAC1
KM30,	SPA SNA CLA
	SZA CLA
SUBERR,	ERROR
	TAD AC2
	CIA
	TAD SUBTMP
	SPA
	JMP SUBERR
	SZA CLA
	JMP SUBOK
	TAD I XR1
	CMA CLL CML
	TAD AC3
	SNL CLA
	JMP SUBERR
	SKP
SUBOK,	ISZ XR1
	TAD AC2
	DCA OP1
	TAD AC3
	DCA OP2
	JMP SUBXIT

TWOSUB,	CIA
	IAC
	DCA SUBMPR
	FIXAC1
	 JMP SUBERR
	TAD I XR1
	SMA SZA CLA
	JMP SUBERR
	TAD AC1
	DCA SUBTMP
	CDF
	POPF
	FIXAC1
	JMP SUBERR
	CIA
	TAD SUBMPR
	SPA CLA
	JMP SUBERR
STRIN2,	TAD SUBTMP

	SUBSWP=.	/EAE OVERLAYS THIS IF PRESENT

	DCA OP2
	TAD AC1
	DCA OP1
	JMS IMULT
SUBMPR,	0
	NOP		/PADDING FOR EAE
	NOP		/OVERLAY
	NOP

SUBXIT,	CDF
	POPF
	CDF 10
	JMP I SUBS

CORADR,	0
	JMS SUBS
	TAD OP2
	RAL CLL
	TAD OP2
	ISZ XR1
	TAD I XR1
	TAD ABASE
	CDF
	ISZ CORADR
	JMP I CORADR

STRADR,	0
	CDF 10
	TAD SBASE
	TAD ADDR
	DCA XR1
	TAD I XR1
	DCA SUBTMP
	TAD [-14
	FIXAC1
	JMP SUBERR
	SZA CLA
	JMP SUBERR
	CLL CML
	TAD AC2
	TAD SUBTMP
	SNL SZA CLA
	JMP SUBERR
	TAD AC2
ONE,	DCA SUBTMP
	TAD I XR1
	CIA
	DCA SUBMPR
	TAD SUBMPR
	RAR CLL
	TAD SUBMPR
	CIA
	DCA X2+2
	TAD STRADR
	DCA SUBS
	DCA AC1
	CDF
	JMP STRIN2


STRCOR,	0
	JMS STRADR
	ISZ XR1
	TAD OP2
	IAC
	TAD I XR1
	CDF
	TAD ABASE
	DCA OP2
	ISZ STRCOR
	JMP I STRCOR

	PAGE
/PRINT #<N>,<LIST>

PRINTN,	EVAL
	FIXAC1
	CMA
	SNA
	JMP PRINT	/PRINT #0
	JMS OCHECK	/CHANL IN RANGE?
	JMS OSETUP
QNOT1,	ERROR		/CHANL OPEN FOR INPUT OR NOT OPEN AT ALL
	TAD (PPACK-XTYPE
PRINT,	TAD (XTYPE
	DCA ODEV
	DCA USESW
	CLA CMA
PSEM2,	DCA PRSW
	DCA TABSW
	EVAL
	TAD WORD
	RTR;RTR;RTR
	AND K17
	TAD (JMP I .+3-10
	DCA .+1
	HLT
	PSEM
	PCOM
	PCR
	PSEM+1
	PCR+1
	PCOM+1
	PUSING
	PUSING+1

PSEM,	JMS DOIT
	TAD TABSW
	SNA
	TAD USESW
	SZA CLA
	JMP PSEM2
	TAD MODE
	SNA CLA
	JMP PSEM2
	TAD ODEV
	TAD (-PPACK
	SNA CLA
	TAD (",-240
	TAD [240
	TYPE
	JMP PSEM2

PCOM,	JMS DOIT
	TAD USESW
	SZA CLA
	JMP PSEM2
	TAD TABC
	TAD (-16
	SMA
	JMP .-2
	CIA
	TAD TABC
	JMS TAB
	JMP PSEM2

PCR,	JMS DOIT
	TAD USESW
	SNA CLA
	JMP PCR2
	CLA CMA
	JMS STRARG
	JMP .+3
	TYPE
	JMP .-4
PDONE,	CLA CMA
	FLUSH

PCR2,	ISZ PRSW
	SKP
	JMS CRLF
	TAD ODEV	/PRINT ON FILE?
	TAD (-PPACK
	SZA CLA
	NEXT		/NO
	TAD (-4
	TAD CHANL
	DCA CHANL
	TAD TABC
	DCA I CHANL
	TAD PACNT
	DCA I CHANL
	TAD PAC
	DCA I CHANL
	TAD OUJMP
	DCA I CHANL
	TAD PRTM	/RESTORE TTY: CHAR COUNTER
	DCA TABC
	TAD (XTYPE
	DCA ODEV
	NEXT		/DONE!

PUSING,	CLA CMA
	DCA NAM
	JMS DOLINK
	ISZ USESW
	ISZ NAM
	JMP PRINT+4
	JMP PCR+1

FLGET,	TAD OPX
	DCA ACX
	TAD OP1
	DCA AC1
	TAD OP2
	DCA AC2
	JMP I FLRET

	PAGE
/FLOATING POINT INTERPRETER

FPT,	0
	CLA CLL
	RDF
	TAD FBACK
	DCA FETCH
	TAD [FBACK
	DCA FLRET

FBACK,	CDF
	DCA AC3
	TAD I FPT
	SNA
	JMP I FPT
	AND [177
	DCA FXR
	TAD I FPT
	AND .+2
	CIA
	AND FPT
	TAD FXR
	DCA FXR
	TAD I FPT
	ISZ FPT
	AND K7400
	CLL RTL
	RTL
	TAD FJUMP
	DCA ARITE
	SNL
	JMP .+3
	TAD I FXR
	DCA FXR

FETCH,	CDF
	TAD I FXR
	DCA OPX
	TAD I FXR
	DCA OP1
	TAD I FXR
	DCA OP2

ARITE,	0
	TAD AC1
	RAR
	DCA AC1
	TAD AC2
	RAR
	DCA AC2
	TAD AC3
	RAR
	DCA AC3
	ISZ ACX
	JMP I ARITE
	JMP I ARITE

FJUMP,	JMP I .
	FLADD
	FLSUB
FLSWP2,	FLMUL
FLSWP4,	FLDIV
PGET,	FLGET
	FLPUT
	FLNOR

ADD,	0
	CLL
	TAD OP2
	TAD AC2
	DCA AC2
	RAL
	TAD OP1
	TAD AC1
	DCA AC1
	JMP I ADD

NEGOP,	0
	TAD OP2
	CIA CLL
	DCA OP2
	CML RAL
	TAD OP1
	CIA
	DCA OP1
	JMP I NEGOP

FLSUB,	JMS NEGOP
FLADD,	JMS SETSGN
	 JMP I FLRET
	 JMP I PGET
	TAD ACX
	SNA
	JMP ADDOK
	SPA
	JMP ALIGN
	CIA
	DCA FXR
	TAD FXR
	TAD [30
	SPA CLA
	JMP I FLRET

OPRITE,	CLL
	TAD OP1
	SPA
	CML
	RAR
	DCA OP1
	TAD OP2
	RAR
	DCA OP2
	TAD AC3
	RAR
	DCA AC3
	ISZ FXR
	JMP OPRITE
	JMP ADDOK

ALIGN,	DCA FXR
	TAD FXR
	TAD [30
	SPA CLA
	JMP I PGET
	TAD AC1
	RAL
	CLA
	JMS ARITE
	ISZ FXR
	JMP .-5

ADDOK,	JMS ADD
	TAD SIGN
	SMA CLA
	JMS ARITE
FLNOR,	NORMALIZE
	JMS ROUND
	JMP I FLRET

	PAGE
	FLSWP=.		/EAE OVERLAY INFORMATION
	MPR=AC3
	QUO=AC3
	DTEMP=.
	MTEMP=.
SETUP,	0
	TAD ACX
	DCA ACX
	TAD OP1
	SPA CLA
	JMS NEGOP
	TAD AC1
	SPA CLA
	NEGATE
	JMP I SETUP

FLMUL,	JMS SETSGN
	 DCA AC1
	 JMP CLRA
	CMA
	JMS SETUP
	TAD AC1
	DCA MTEMP
	DCA AC1
	TAD AC2
	SNA
	JMP .+4
	DCA MPR
	DCA AC2
	JMS MULT
	TAD MTEMP
	DCA MPR
	IAC
	JMS MULT
	JMP MDEXIT


	DSWCH=.
MULT,	0
	TAD [-14
	DCA FXR
	TAD AC1
	CLL RAR
	DCA AC1
	TAD AC2
	RAR
	DCA AC2
	TAD MPR
	RAR
	DCA MPR
	SNL
	JMP .+6
	TAD OP2
	TAD AC2
	DCA AC2
	CML RAL
	TAD OP1
	ISZ FXR
	JMP MULT+3
	TAD AC1
	DCA AC1
	JMP I MULT

FLDIV,	JMS SETSGN
	 ERROR
	 JMP CLRA
	JMS SETUP
	TAD [-15
	DCA FXR
	CLL CMA RAL
	DCA DSWCH
	JMP DIVIN

DSAVE,	DCA DTEMP
	TAD [-14
	DCA FXR
	RAL
	DCA QUO
	TAD AC2
	CLL RAL
	DCA AC2
	TAD AC1
	RAL
	DCA AC1
	STL RTR
	TAD AC1
	SMA CLA
	JMP SETQ
	TAD AC1
	SMA CLA
	JMP .+7
	TAD OP2
	TAD AC2
	DCA AC2
	RAL
	TAD OP1
	JMP .+10
DIVIN,	TAD OP2
	CIA CLL
	TAD AC2
	DCA AC2
	CML RAL
	TAD OP1
	CIA
	TAD AC1
	DCA AC1
SETQ,	TAD QUO
	ISZ FXR
	JMP DSAVE+3
	ISZ DSWCH
	JMP DSAVE
	DCA AC2
	TAD DTEMP
	DCA AC1
	RAR
	DCA AC3
	JMP MDEXIT


IMULT,	0
	TAD [-15
	DCA SETUP
	JMP IMULT2
IMULT1,	TAD I IMULT
	SNL
	CLA CML
	TAD OP1
	CML RAR
	DCA OP1
IMULT2,	TAD OP2
	RAR
	DCA OP2
	ISZ SETUP
	JMP IMULT1
	ISZ IMULT
	JMP I IMULT

	PAGE
FNORM,	0
	TAD AC1
	SNA
	TAD AC2
	SNA
	TAD AC3
	SZA CLA
	JMP NLOOP+4
	DCA ACX
	JMP I FNORM
NLOOP,	CLA CMA
	TAD ACX
	DCA ACX
	JMS ALEFT
	STL RTR
	TAD AC1
	SMA CLA
	JMP NLOOP

TSTOVR,	STL RAR
	TAD AC1
	SNA
	TAD AC2
	SNA CLA
	JMS ARITE
	JMP I FNORM

ALEFT,	0
	TAD AC3
	CLL RAL
	DCA AC3
	TAD AC2
	RAL
	DCA AC2
	TAD AC1
	RAL
	DCA AC1
	JMP I ALEFT

NEGAC,	0
	TAD AC2
	CLL CIA
	DCA AC2
	CML RAL
	TAD AC1
	CIA
	DCA AC1
	JMP I NEGAC

ROUND,	0
	TAD AC1
	RAL
	CLA CML
	TAD AC3
	SZA SNL
	TAD [-1
	SPA CLA
	ISZ AC2
	JMP I ROUND
	ISZ AC1
	TAD ROUND
	DCA FNORM
	CLA IAC
	JMP TSTOVR

SETSGN,	0
	TAD OP1
	SNA CLA
	JMP I SETSGN
	ISZ SETSGN
	TAD AC1
	SNA
	JMP I SETSGN
	ISZ SETSGN
	RAL
	CLA RAR
	TAD OP1
	DCA SIGN
	TAD OPX
	CIA
	JMP I SETSGN


MDEXIT,	CLL
	TAD AC1
	SPA CLA
	JMS ARITE
	JMS ROUND
	TAD SIGN
	SPA CLA
	NEGATE
	JMP I FLRET

CLRA,	DCA ACX
	DCA AC2
	JMP I FLRET

FLPUT,	STA CLL RTL
	TAD FXR
	DCA FXR
	TAD ACX
	DCA I FXR
	TAD AC1
	DCA I FXR
	TAD AC2
	DCA I FXR
	JMP I FLRET

FRAN,	FINT
	FGET RNDM
	FEXT
	TAD RANCON
	DCA ACX
	JMS ALEFT
	ISZ ACX
	JMP .-2
	JMS ADD
	JMS ALEFT
	JMS ADD
	FINT
	FPUT RNDM
	FEXT
	CLA CLL CMA RAR
	AND AC1
	DCA AC1
	NORMAL
	JMP I FUNRET

RNDM,	0
	3040
	2571
RANCON,	-16

	PAGE
/FLOATING INPUT ROUTINE

FLINTP,	0
	CLA CMA
	DCA ESWCH
	CLA CMA
	DCA PSWCH
GETEXP,	CLA CMA
	DCA INSIGN
	DCA DECEXP
	FLOAT

	TAD CHAR	
	JMS XSPNOR
	SORT
	 -253
	 JMP INREAD
	 -255
	 DCA INSIGN
	 JMP INREAD
	 0
	TAD CHAR

INLOOP,	TAD (-260
	DCA DIGIT
	TAD DIGIT
	CLL
	TAD (-12
	SZL
	JMP PTEST
	JMS SCALE
	TAD PSWCH
	DCA DECEXP
	FINT
	FADD FDIGIT
	FNOR
	FEXT
INREAD,	JMS XSPNOR
	JMP INLOOP

ESWCH,	0
PSWCH,	0

PTEST,	CLA STL RTL
	TAD DIGIT
	ISZ PSWCH
	CLA IAC	
	SNA CLA	
	JMP INREAD
	ISZ INSIGN
	NEGATE
	ISZ ESWCH
	JMP RFINAL
	TAD DIGIT
	TAD (-25
	SZA CLA	
	JMP RSCALE
	DCA EVALSW
	PUSHF
	TAD DECEXP
	PUSH
	JMS XSPNOR	/SKIP OVER THE "E"
	JMP GETEXP

RFINAL,	FIXAC1
	 ERROR		/EXP>2^13
	CIA	
	POP
	DCA DECEXP
	POPF

RSCALE,	TAD DECEXP
	SNA
	JMP I FLINTP
	JMS SCALE
	DCA DECEXP
	JMP RSCALE

/INPUT-OUTPUT SCALING

SCALE,	0
	SMA CLA	
	JMP SCALE1	
	FINT
	FMUL FLTEN
	FEXT
	CLA IAC
	JMP SCALE2

SCALE1,	FINT
	FDIV FLTEN
	FEXT
	CLA CMA
SCALE2,	TAD DECEXP
	JMP I SCALE

FLTEN,	0004
	2400
	0000
/FIX AND FLOAT ROUTINES

XFXAC1,	0
	TAD ACX
	TAD [-14
	SMA
	JMP I XFXAC1
	ISZ XFXAC1
	TAD (43
	SPA
	CLA
	TAD (-43
	DCA FXR
	JMP .+5
	TAD AC1
	RAL
	CLA
	JMS ARITE
	ISZ FXR
	JMP .-5
	TAD FDIGIT
	DCA ACX
	TAD AC1
	JMP I XFXAC1

XFLOAT,	0
	DCA DIGIT
	FINT
	FGET FDIGIT
	FNOR
	FEXT
	JMP I XFLOAT

FDIGIT,	0013
DIGIT,	0000
	0000

	PAGE
/CONVENTIONAL BASIC OUTPUT CONTROLLER
/  ROUNDING IS ALWAYS TO FULL SIGNIFICANCE
/EXPON IS EXPONENT RELATIVE TO .XXXXXX
/  DECEXP GETS COMPUTED AS 1-EXPON
/PTR POINTS TO LAST NON-ZERO DIGIT IN BUFFER
/  WIDTH IS PTR-(START OF BUFFER)
/LEFT IS NUMBER OF POSITIONS LEFT OF PERIOD
/  COMPUTED AS MAX(EXPON,0)
/RIGHT IS NUMBER OF POSITIONS RIGHT OF PERIOD
/  COMPUTED AS MAX(WIDTH-EXPON,0)
/IF (RIGHT+LEFT) EXCEEDS "DIGITS", THEN
/  OUTPUT IN E-NOTATION


	DIGITS=6
FLOUTP,	0
	JMS DOBUFF
	JMS DECRND

	TAD DECEXP
	CIA
	IAC
	SPA
	CLA
	DCA LEFT

	TAD DECEXP
	TAD PTR
	TAD (-BUFFER-2
	SPA
	CLA CMA
	DCA RIGHT

	TAD LEFT
	TAD RIGHT
	TAD (-DIGITS
	SMA
	JMP EFORM

	ISZ RIGHT
	IAC
	TAD (DIGITS+2
	JMS TSTTAB
	TAD DECEXP
	DCA NULLS
	JMS FPRINT
	JMP I FLOUTP

/OUTPUT EXPONENTIAL FORM

EFORM,	CLA IAC
	DCA LEFT
	TAD (DIGITS-1
	DCA RIGHT
	DCA NULLS
	TAD (DIGITS+6
	JMS TSTTAB
	JMS FPRINT
	JMS EXPOUT
	JMP I FLOUTP

/DETERMINE WHETHER OUTPUT
/WILL FIT ON CURRENT LINE
/IF NOT, OUTPUT CR/LF

TSTTAB,	0
	TAD TABC
	CIA
	TAD MAXTAB
	SMA CLA
	JMP I TSTTAB
	JMS CRLF
	JMP I TSTTAB
/SCALE AND CONVERT
/FLOATING ACCUMULATOR

DOBUFF,	0
	TAD AC1
	SMA CLA
	JMP .+3
	NEGATE
	TAD (15
	TAD [240
	DCA BUFFER

SLOOP,	DCA DECEXP
	TAD ACX
	SPA
	JMP .+4
	TAD (-3
	SPA SNA CLA
	JMP .+3
	JMS SCALE
	JMP SLOOP

/IF FIRST DIGIT=0, THEN
/IGNORE IT AND BUMP DECEXP

	TAD [BUFFER
	DCA PTR
	FIXAC1
	 NOP
	SZA
	JMP OUTBUF
	ISZ DECEXP

/GENERATE NEXT DIGIT

WLOOP,	DCA AC1
	NORMALIZE
	CLA CMA
	JMS SCALE
	CLA
	FIXAC1
	 NOP

/PACK DIGIT IN BUFFER

OUTBUF,	ISZ PTR
	DCA I PTR
	TAD PTR
	TAD (-BUFFER-DIGITS-1
	SZA CLA
	JMP WLOOP
	JMP I DOBUFF

/GET NEXT CHAR FROM IMAGE
/1ST RETURN IF LBSIGN
/2ND RETURN OTHERWISE

UNPK,	0
	JMS USECHR
	 CLA
	TAD (-"#
	SZA CLA
	ISZ UNPK
	JMP I UNPK

/COMPUTE ROUNDING ADJUSTMENT

GOODIM,	0
	ISZ USING
	JMS DOBUFF
	TAD DECEXP
	CIA
	TAD RIGHT
	SPA
	CLA CMA
	TAD (1-DIGITS
	SMA
	CLA
	JMS DECRND
	TAD DECEXP
	DCA NULLS
	JMP I GOODIM

	PAGE
/OUTPUT CONTROLLER FOR PRINT USING
/WHEN CALLED, ONE LBSIGN IN CHAR
/1ST RETURN=FALSE START (FLAC UNCHANGED)
/2ND RETURN=GOOD FORMAT (FLAC CLOBBERED)
/ON EITHER RETURN CURRENT CHAR NOT TYPED

USING,	0
	DCA LEFT
	DCA RIGHT
	TAD (-4
	DCA ARRCT
	JMP UPLEFT+1

/COUNT LEADING LBSIGNS

UPLEFT,	ISZ LEFT
	JMS UNPK
	 JMP UPLEFT
	TAD CHAR
	TAD (-".
	SZA CLA
	JMP TSTLFT

/PERIOD IS TERMINATOR
/UNLESS FOLLOWED BY LBSIGN

	JMS UNPK
	 JMP UPRITE
	TAD LEFT
	SZA CLA
	JMP .+4
	TAD ("#
	TYPE
	JMP .+3
	JMS GOODIM
	JMS FPRINT
	TAD PERIOD
USEX,	TYPE
	JMP I USING

/EITHER INTEGER FORMAT
/OR ONLY ONE LBSIGN

TSTLFT,	TAD LEFT
	SZA CLA
	JMP TSTARR
	TAD ("#
	JMP USEX

/COUNT TRAILING LBSIGNS

UPRITE,	ISZ RIGHT
	JMS UNPK
	 JMP UPRITE

/COUNT UP TO 4 UPARROWS

TSTARR,	TAD CHAR
	TAD (-"^
	SZA CLA
	JMP NONEXP
	JMS UNPK
PERIOD,	0256/(NOP)
	ISZ ARRCT
	JMP TSTARR

/FOUND EXPONENTIAL FORMAT
/SUPPRESS LEADING 0'S
/ONLY IF FLOATING AC=0

	JMS GOODIM
	TAD BUFFER+1
	SZA CLA
	TAD LEFT
	CIA
	IAC
	DCA NULLS
	JMS FPRINT

/ADJUST EXPONENT TO FORMAT

	TAD BUFFER+1
	SNA CLA
	JMP .+5
	TAD LEFT
	CIA
	CMA
	TAD DECEXP
	DCA DECEXP
	JMS EXPOUT
	JMP I USING

/FOUND NON-EXPONENTIAL FORMAT
/TYPE ANY EXTRANEOUS UPARROWS

NONEXP,	JMS GOODIM
	TAD BUFFER+1
	SNA CLA
	ISZ NULLS
	JMS FPRINT
	TAD ARRCT
	CMA
	TAD (-4
	DCA ARRCT
	JMP .+3
	TAD ("^
	TYPE
	ISZ ARRCT
	JMP .-3
	JMP I USING

LDOPSB,	ISZ FILESW
	JMS I SBSWP
	JMP FILKLG
	JMP LDOP+2
LIT,	TAD LBASE
	SKP
LDOP,	TAD SBASE
	TAD ADDR
DCAXR1,	DCA XR1
	PUSHF
	CDF 10
	TAD I XR1
	DCA ACX
	TAD I XR1
	DCA AC1
	TAD I XR1
	DCA AC2
	CDF

	JMP EVAL2


OCHECK,	0
	SPA
QRNG,	 ERROR
	TAD [-5
	SMA
	JMP QRNG
	TAD (4
	DCA TEMP
	TAD (-16
	DCA USING
	TAD TEMP
	ISZ USING
	JMP .-2
	TAD (BCHANL-1
	DCA CHANL
	JMP I OCHECK

	PAGE
/DECIMAL ROUNDING AND ZERO
/SUPPRESSION ROUTINE

	CARRY=NULLS
DECRND,	0
	TAD (BUFFER+DIGITS+1
	DCA PTR
	CLL
	TAD I PTR
	TAD [-5
	CLA RAL
	DCA CARRY
	JMP TSTRND

RNLOOP,	CLA CMA
	TAD PTR
	DCA PTR
	TAD CARRY
	TAD I PTR
	DCA I PTR
	TAD I PTR
	SZA
	TAD (-12
	SZA CLA
	JMP I DECRND
TSTRND,	TAD PTR
	TAD (-BUFFER-2
	SMA
	JMP RNLOOP

/ADJUST FOR OVERFLOW, OR
/MAKE 0 LOOK LIKE AN INTEGER

	TAD DECEXP
	DCA DECEXP
	TAD CARRY
	DCA I PTR
	JMP I DECRND
/PRINT ACCORDING TO FORMAT

FPRINT,	0
	TAD BUFFER
	TYPE
	TAD [BUFFER
	DCA FXR
	TAD LEFT
	TAD RIGHT
	CIA
	DCA FCOUNT

PRLOOP,	TAD FCOUNT
	TAD RIGHT
	SZA
	JMP .+3
	TAD (".
	TYPE

	CMA
	TAD NULLS
	SNA
	JMP SIGNIF
	SMA CLA
	JMP .+3
	TAD ("*
	JMP OUTGO+1

	TAD FCOUNT
	TAD RIGHT
	IAC
	SPA CLA
	TAD (-20
	JMP OUTGO

SIGNIF,	ISZ NULLS
	NOP
	TAD PTR
	CIA
	TAD FXR
	SPA CLA
	TAD I FXR

OUTGO,	TAD [260
	TYPE
	ISZ FCOUNT
	JMP PRLOOP
	JMP I FPRINT
EXPOUT,	0
	TAD ("E
	TYPE
	TAD DECEXP
	SMA SZA CLA
	CLL CML RTL
	TAD ("+
	TYPE
	DCA X1
	DCA X2
	TAD DECEXP
	SPA
	CIA
	TAD (-144
	ISZ X1
	SMA
	JMP .-3
	TAD K12
	ISZ X2
	SPA
	JMP .-3
	DCA X3

	CMA
	TAD X1
	SNA
	JMP .+3
	TAD [260
	TYPE
	TAD X2
	CIA
	TAD (272
	TYPE
	TAD X3
	TAD [260
	TYPE
	JMP I EXPOUT

USECHR,	0
	CLA CMA CLL
	JMS STRARG
	SKP
	ISZ USECHR
	SNA
	ISZ USESW	/END-OF-FORMAT SWITCH
	DCA CHAR
	TAD CHAR
	JMP I USECHR


	PAGE
/SINE AND COSINE

FSIN,	FINT
	FSUB PIHALF
	FEXT
FCOS,	FINT
	FDIV PIHALF
	FEXT
	FIXAC1
SER,	 ERROR		/ARG TOO BIG
	RTR
	SMA CLA
	CMA
	DCA AC1
	CMA RAL
	DCA FSWCH
	NORMALIZE
	FINT
	FPUT X1
	FMUL X1
	FPUT X2
	FMUL SIND
	FADD SINC
	FMUL X2
	FADD SINB
	FMUL X2
	FADD SINA
	FMUL X2
ATNADD,	FADD PIHALF
	FMUL X1
	FEXT
	ISZ FSWCH
	NEGATE
	JMP I FUNRET
/TANGENT ROUTINE

FTAN,	PUSHF
	TAD (.+3
	DCA FUNRET
	JMP FCOS
	TAD AC1
	SNA CLA
FTANER,	 ERROR		/TAN PI/2 RADIANS
	FINT
	FPUT X3
	FEXT
	POPF
	TAD (.+3
	DCA FUNRET
	JMP FSIN
	FINT
	FDIV X3
	FEXT
	JMP I (EVAL2
/ARCTANGENT ROUTINE

FATN,	TAD ACX
	SPA SNA CLA
	JMP TANGO
	FINT
	FPUT X1
	FGET FLTONE
	FDIV X1
	FEXT
	CLA CMA
TANGO,	DCA FUNRET
	FINT
	FPUT X1
	FMUL X1
	FPUT X2
	FADD ATNE
	FMUL X2
	FADD ATNF
	FPUT X3
	FGET ATNA
	FMUL X2
	FADD ATNB
	FMUL X2
	FADD ATNC
	FMUL X2
	FADD ATND
	FDIV X3
	FMUL X1
	FEXT
	ISZ FUNRET
	JMP I (EVAL2
	TAD AC1
	SMA CLA
	TAD ATNSUB
	TAD ATNADD
	DCA .+2
	FINT
	FADD PIHALF
	FEXT
	NEGATE
	JMP I (EVAL2

ATNSUB,	FSUB-FADD
/TRIGONOMETRIC CONSTANTS

SINA,	0000
	5325
	0420/ROUNDED UP
/	5145

SINB,	7775
	2431
	5054/ROUNDED UP
/	6472

SINC,	7771
	5466
	6315
/	2413

SIND,	7764
	2366
	5775
/	3143

ATNA,	7772
	5240
	0156

ATNB,	7777
	2462
	1104

ATNC,	0002
	2776
	0014

ATND,	0002
	3507
	7333

ATNE,	0003
	2065
	5165

ATNF,	0002
	3507
	7333

	PAGE
/POWER ROUTINE

FLPOW,	TAD AC1
	SZA CLA
	JMP .+5
	TAD OP1
	SZA CLA
	JMP I (EVAL2
FLER,	 ERROR		/0 TO 0 POWER
	FINT
	FGET OPX
	FPUT X3
	FEXT
	TAD AC1
	SNA
	JMP SETONE
	DCA SQLOOP
	TAD AC1
	SPA CLA
	NEGATE
	TAD ACX
	SPA SNA
	JMP FULPOW
	TAD [-3
	SMA SZA CLA
	JMP FULPOW
	FIXAC1
	 CLA/DUMMY
	CIA
	DCA FUNRET
	TAD AC2
	SNA
	TAD AC3
	SZA CLA
	JMP FULPOW
	FINT
	FGETI WARSAW
	FEXT
	JMP .+4
	FINT
	FMULI WARSAW
	FEXT
	ISZ FUNRET
	JMP .-4
	JMP PRECIP

FULPOW,	FINT
	FGETI WARSAW
	FEXT
	TAD (.+3
	DCA FUNRET
	JMP FLOG
	FINT
	FMUL X3
	FEXT
	TAD (EVAL2
	DCA FUNRET
	JMP FEXP

PRECIP,	TAD SQLOOP
	SMA CLA
	JMP I (EVAL2
	FINT
	FPUT X1
	FGET FLTONE
	FDIV X1
	FEXT
	JMP I (EVAL2
/MISCELLANEOUS FUNCTIONS

FITR,	TAD [-14
	FIXAC1
FITR27,	27
	CLA
	TAD FITR27
	DCA ACX
	DCA AC3
	NORMALIZE
	JMP I FUNRET

FSGN,	TAD AC1
	SNA
	JMP I FUNRET
SETONE,	RAL
	CLA RAL
	STL RTR
	DCA AC1
	DCA AC2
	STL RAL
	DCA ACX
	JMP I FUNRET

/SQUARE ROOT ROUTINE

FSQT,	TAD AC1
	SNA
	JMP I FUNRET
	SMA CLA
	JMP .+3
	NEGATE
SQRER,	 ERROR		/SQRT OF -ARG
	FINT
	FPUT X1
	FEXT
	TAD ACX
	RAL
	CLA IAC
	TAD ACX
	RAR
	DCA ACX
	RTR
	TAD F2000
	TAD AC1
	RAR
	DCA AC1
	JMS SQLOOP
	JMS SQLOOP
	JMS SQLOOP
	JMP I FUNRET

SQLOOP,	0
	FINT
	FPUT X2
	FGET X1
	FDIV X2
	FADD X2
	FEXT
	CLA CMA
	TAD ACX
	DCA ACX
	JMP I SQLOOP


	PAGE
/EXPONENTIAL ROUTINE

FEXP,	FINT
	FDIV LOGE2
	FEXT
	FIXAC1
FEXPER,	 ERROR		/ARG TOO BIG
	DCA LOGN+1
	TAD K12
	DCA ACX
	DCA AC1
	NORMALIZE
	FINT
	FMUL LOGE2
	FPUT X1
	FMUL X1
	FADD EXPC
	FPUT X2
	FGET EXPB
	FDIV X2
	FADD EXPA
	FSUB X1
	FPUT X2
	FGET X1
	FADD X1
	FDIV X2
	FADD FLTONE
	FMUL ACX
	FEXT
	TAD LOGN+1
	TAD ACX
	DCA ACX
	JMP I FUNRET
/LOGARITHM FUNCTION

FLOG,	TAD AC1
	SPA SNA CLA
LOGER,	 ERROR		/LOG OF 0 OR -ARG
	CLA CMA
	TAD ACX
	DCA LOGN+1
	DCA ACX
	FINT
	FADD HAFRT2
	FPUT X1
	FSUB SQRT2
	FDIV X1
	FPUT X1
	FMUL X1
	FPUT X2
	FMUL LOGD
	FADD LOGC
	FMUL X2
	FADD LOGB
	FMUL X2
	FADD LOGA
	FMUL X1
	FPUT X1
	FGET LOGN
	FNOR
	FMUL LOGE2
	FADD X1
	FEXT
	JMP I FUNRET
/MID(A$,N1,N2) FUNCTION

MID,	FIXAC1
	JMP MIDERR
	DCA MODE
	POPF
	FIXAC1
	JMP MIDERR
	CIA
	SNA
	JMP MIDERR
	DCA GOTEMP
	POPF
	CLA CMA RAL CLL
	DCA UNSTCK
	CLA IAC
	JMS GETSTUF
	TAD WARSAW
	DCA T2
	DCA TEMP
	JMP .+4
	UNPACK
MIDERR,	 ERROR
	DCA KTEMP
	ISZ GOTEMP
	JMP .-4
	TAD MODE
	CMA
	DCA UNCNT
MIDXIT,	TAD (EVAL2
	DCA STRARG
	JMP STRKLG

LOGE2,	0000
	2613
	4413
/	7677

EXPA,	0004
	3001
	7301
/	0644

EXPB,	0012
	5514
	3103
/	3447

EXPC,	0006
	3602
	7055
/	3655

LOGN,	0013
	0000
	4000

HAFRT2,	0000
	2650
	1171
/	4640

SQRT2,	0001
	2650
	1171
/	4640

LOGA,	0001
	3777
	7777
/	7625

LOGB,	0000
	2525
	2554
/	7612

LOGC,	7777
	3144
	7773
/	5726

LOGD,	7777
	2320
	7215
/	0376

	SWPEND=.

	PAGE

/TEMPORARILY STUCK HERE

FABS,	TAD AC1
	SPA CLA
FNEG,	NEGATE
	JMP I FUNRET

INUN,	0		/SUB TO UNPACK ONE CHAR FROM BUFFER
	TAD WARSAW
	DCA LINK2
	TAD SUNCNT
	DCA UNCNT
INUN3,	JMS UNPAC0		/IT'S NO QUITE THAT EASY!
	JMP INUN2	/READ NEW RECORD
	AND (177
	SNA
	JMP .-4		/IGNORE NULLS
	TAD (200
	DCA CHAR
	TAD UNCNT
	DCA SUNCNT
	TAD CHAR
	TAD (-212
	SNA
	JMP INUN+1
	TAD (212-214	/^L
	SNA
	JMP INUN+1
	TAD (214-232	/^Z
	SNA
QEOF,	 ERROR		/EOF
	TAD (232
	JMP I INUN

INUN2,	TAD UNWD
	TAD KM400
	DCA UNWD
INSTRT,	CDF		/UNKLUDGE A KLUDGE
	TAD (ICHAR1
	DCA ICHLV
	CMA
	DCA UNSTCK
	TAD I CHANL
	DCA TEMP	/HNDLR ENTRY
	TAD CHANL
	DCA XR2
	TAD I CHANL	/RECORD NUMBER
	ISZ I XR2	/ONE MORE RECORD
	DCA IREC
	CLL CMA RAL	/-2
	TAD CHANL
	DCA CHANL
	TAD (-601
	DCA UNCNT
	TAD UNWD
	DCA IREC-1
	JMS I TEMP
	210		/READ 2 PAGES, FIELD 1
	0		/BUFFER
IREC,	0		/RECORD #
	SMA CLA		/FATAL ERROR?
	JMP INUN3	/NOW UNPACK CHAR
QFAT,	 ERROR		/YES
SUNCNT,	0		/LOC TO SAVE UNCNT

BCHANL=.


/SETUP ROUTINE

LSWAPL,	CDF 10
	TAD K12
	DCA XR1
	TAD I XR1
	DCA LBASE
	TAD I XR1
	DCA SBASE
	ISZ XR1
	TAD I XR1
	DCA ABASE
	TAD I XR1
	DCA PACKWD	/STARTING ADDR
	TAD I XR1
	CDF
	DCA I KOSTART
	TAD INHNDL
	CMA
	AND [7600
	SZA CLA
	TAD [7600
	TAD K7400
	DCA PPNT
	CDF 10
	TAD I (0
	CDF
	DCA MAXBUF
	7447		/SWITCH TO A-MODE (8/E)
KOSTAR,	OSTART		/PROTECT AGAINST SCA DVI IF NOT 8/E
	CLA CMA
	MQL MUY		/CHECK FOR EAE
	2		/BY MULTIPLYING 7777 BY 2
	SNA CLA		/IF NON-ZERO,SHOULD BE 1
	JMP LSWAP2		/WHICH MEANS THE MUY HAPPENED
	TAD (XSWAP-1	/BEGINNING OF SWAP TABLE
	DCA XR1
SWPLP,	TAD I XR1	/ZERO WC ENDS THE TABLE
	SNA
	JMP LSWAP2
	DCA TEMP
	TAD I XR1
	DCA XR2
	TAD I XR1
	DCA FXR
	TAD I XR2
	DCA I FXR	/SIMPLY SWAP UNTIL
	ISZ TEMP	/WC OVERFLOWS
	JMP .-3
	JMP SWPLP	/DO THE NEXT


	PAGE
WBIN,	0
	POP
	DCA RNDCHNL
	TAD I RNDCHNL
	DCA WBUF
	TAD I RNDCHNL
	DCA BINHND
	TAD I RNDCHNL
	TAD I WARSAW
	DCA I WARSAW
	TAD I RNDCHNL
	DCA WREC
	TAD RNDCHNL
	DCA TEMP
	TAD WREC
	CIA
	TAD I WARSAW
	SNA CLA
	JMP CHPEXT
	ISZ I RNDCHNL
	JMP NOWRIT
	JMS I BINHNDL
	4210
WBUF,	0
WREC,	0
	HLT
NOWRIT,	POP
	DCA RREC
	TAD WBUF
	DCA RBUF
	JMS I BINHNDL
	210		/READ 1 RECORD (CORE-D?)
RBUF,	0
RREC,	0
	HLT
	TAD RREC
	DCA I TEMP
	ISZ TEMP
	DCA I TEMP
	JMP I WBIN

CHPEXT,	POP
	CLA
	ISZ TEMP
	JMP I WBIN

FILADR,	0
	JMS SUBS
	TAD (6000
	AND OP2
	RAL
	TAD OP1
	RTL
	DCA OP1
	TAD OP2
	RAL CLL
	RAL CLL
	DCA OP2
	CLA CMA
	JMS FILCMN
	CLA CMA
	JMP I FILADR

SETFIL,	CLA CMA
	JMP I FLRET

BINHND,	0

FILCMN,	0
	DCA RNSW
	TAD I XR1
	TAD OP1
	DCA OP1
	TAD I XR1
	CLL
	TAD OP2
	DCA OP2
	SZL
	ISZ OP1
	TAD I XR1
	DCA WBIN
	CDF
	TAD CHANL
	PUSH
	CDF 10
	TAD I WBIN
	CDF
	JMS OCHECK
	TAD CHANL
	IAC
	DCA RNDCHNL	/SO PRINT #,ETC. WILL SLIDE ALONG
	POP		/WITHOUT EVEN NOTICING
	DCA CHANL
	TAD RNDCHNL
	DCA XR1
	TAD OP2
	AND [377
	TAD RNSW
	TAD I XR1
	PUSH
	TAD OP2
	AND K7400
	RAL CLL
	TAD OP1
	RTL;RTL
	PUSH
	TAD RNDCHNL
	PUSH
	JMP I FILCMN

STRFIL,	0
	JMS I STRSW2
	JMS FILCMN
	JMP I STRFIL

RNSW,	0
STRSW2,	STRADR

	PAGE

CLSHND,	0
CLSBIN,	CLA
	TAD CHANL
	TAD K12
	DCA NULLS
	ISZ CHANL
	TAD I CHANL
	DCA CLSBUF
	TAD I CHANL
	DCA CLSHNDL
	TAD CLSBUF
	DCA I CHANL
	TAD I CHANL
	DCA CLSREC
	TAD I NULLS
	SNA CLA
	ISZ I CHANL
	JMP I KQCL
	JMS I CLSHNDL
	4210
CLSBUF,	0
CLSREC,	0
	HLT
	JMP I KQCL

PLIT,	TAD [ICHAR1
	PUSH
	TAD [CDF 10
	PUSH
	PUSH
	IAC
	TAD PACKWD
	PUSH
	CDF 10
PLITGO,	TAD I PACKWD
	DCA TEMP
	TAD TEMP
	AND [377
	SNA CLA
	JMP I KUST2
	TAD TEMP
	AND K7400
	SNA CLA
	JMP PLITG2
	TAD I PACKWD
	SZA CLA
	JMP PLITGO
	JMP I KUST2

PLITG2,	ISZ PACKWD
	JMP I KUST2

KQCL,	QCL+1
KUST2,	UNSET2



	FREECORE=.	/PDL STARTS HERE


LSWAP2,	TAD (7177
	DCA XR1
	TAD (BCHANL-1
	DCA XR2
	TAD (-70
	DCA TEMP
	CDF 10
	TAD I (21
	CDF
	SNA CLA
	DCA LSWAP3
LSWAP3,	TAD I XR1
	DCA I XR2
	ISZ TEMP
	JMP LSWAP3
	TAD INHNDL
	AND [7600
	RAR CLL CML
	TAD (400
	DCA LSWAP4
	CDF 10
	TAD I (21
	CDF
	SPA CLA
	NEXT
	JMS I (7607
LSWAP4,	0
	7000
	27
	HLT
	NEXT

LSWAP5=.



	/TABLE FORMAT
	/-WC;ADDR OF OVERLAY;ADDR OF WHERE TO OVERLAY

XSWAP,	-10
	XSUBEAE-1		/NEW SUBSCRIPTING
	SUBSWP-1

	-200
	XFLEAE-1	/MULTIPLY AND DIVIDE
	FLSWP-1

	-1		/ADDR CALLS
	XFL1-1
	FLSWP1-1

	-1
	XFL1-1
	FLSWP2-1

	-1
	XFL2-1
	FLSWP3-1

	-1
	XFL2-1
	FLSWP4-1

K0,	0000

XSUBEAE=.

	MQL		/THIS OVERLAYS THE
	TAD AC1		/SOFTWARE MULTIPLY
	NOP
	MUY		/IN "TWOSUB"
	0
	DCA OP1
	MQA
	DCA OP2


	PAGE
	XFLEAE=.
	XTEMP=.
XSETUP,	0
	TAD ACX
	DCA ACX
	TAD OP1
	SPA CLA
	JMS NEGOP
	TAD AC1
	SPA CLA
	NEGATE
	TAD OP2
	CLL RAL
	JMP I XSETUP

FXMUL,	JMS SETSGN
	 DCA AC1
	 JMP CLRA
	CMA
	JMS XSETUP
	DCA MOP2
	TAD OP1
	RAL
	DCA MOP1
	TAD AC2
	CLL RAL
	DCA MAC2
	TAD AC1
	RAL
	DCA MAC1
	TAD MAC2
	MQL MUY
MOP2,	 0
	DCA AC2
	TAD MOP2
	MQL
	TAD AC2
	MUY
MAC1,	 0
	DCA XTEMP
	MQA
	DCA AC2
	TAD MOP1
	MQL
	TAD AC2
	MUY
MAC2,	 0
	DCA AC2
	MQA
	DCA AC3
	TAD MAC1
	MQL
	TAD AC2
	MUY
MOP1,	 0
	DCA AC1
	MQA
DIVOUT,	TAD XTEMP
	DCA AC2
	SZL
	ISZ AC1
	JMP MDEXIT

	QUO=MAC2
	HIQUO=MAC1
FXDIV,	JMS SETSGN
	 ERROR
	 JMP CLRA
	JMS XSETUP
	DCA ZDIV2
	TAD OP1
	RAL
	DCA ZDIV1
	JMS ZDIV
	DCA HIQUO
	JMS ZDIV
	DCA XTEMP
/FULL SUBTRACT FOR ROUNDING
	TAD OP2
	CLL CIA
	TAD AC2
	CLA CML RAL
	TAD OP1
	CIA
	TAD AC1
	CLA RAR
	DCA AC3
	TAD HIQUO
	DCA AC1
	JMP DIVOUT

ZDIV,	0
	TAD AC2
	MQL
	TAD AC1
	DVI
ZDIV1,	 0
	SZL
	JMP ZDVOVR
	DCA AC1
	MQA
	DCA QUO
	MUY
ZDIV2,	 0
	DCA XTEMP
	MQA
	CLL CIA
	DCA AC2
	CML RAL
	TAD XTEMP
	CIA
ZDIV3,	TAD AC1
	DCA AC1
	TAD QUO
	SZL
	JMP I ZDIV
	CMA IAC
	CMA CLL
	DCA QUO
	TAD AC2
	TAD ZDIV2
	DCA AC2
	RAL
	TAD ZDIV1
	JMP ZDIV3

ZDVOVR,	CLA MQL
	DCA QUO
	TAD AC2
	DCA AC1
	TAD ZDIV2
	JMP ZDIV2+1

	PAGE
ENDSWP=.	/END OF EAE OVERLAYS
	SREL=XSUBEAE-SUBSWP
	FREL=XFLEAE-FLSWP

	FIELD 0
/ERROR PROCESSOR
/READ OVER 4400, 4600, 5000, 5200

	*4400
	REL=.-4400

QX77,	77

XER,	DCA CHCK+1	/DISALLOW ^P AND ^C
	TAD ODEV
	DCA OLDEV
	TAD (XTYPE
	DCA ODEV
	CDF 10
	DCA PRI2
	CDF
	DCA I (TYPSW
	JMS CRLF
	TAD I (XERROR	/"OUT OF DATA" IS SPECIAL CASE
	TAD (-QEOF-1
	SNA CLA
	TAD CHANL
	TAD (-RCHANL-4
	SZA CLA
	JMP .+3		/NO
	TAD (OOD-REL
	JMP DAT1
	TAD (ELIST-REL
	DCA T2
XERSKP,	SKP
	ISZ T2
	TAD I T2	/SEARCH FOR TEXT
	ISZ T2
	SZA		/END OF LIST?
	TAD I (XERROR
	SZA CLA
	JMP .-5
	TAD T2
	TAD (ECHAIN-REL^7777
	SPA CLA		/ARE WE COMING FROM CHAIN?
	JMP XRCHAIN	/YES, RESTORE LOCS 10000-10022
XER2,	TAD I T2
	RAL CLL
	SNL
	ISZ ERET1	/NON-FATAL ERROR
	STL RAR
DAT1,	JMS PRI		/PRINT ERROR MESSAGE
	TAD T2
	DCA RSW		/IN CASE OF NON-FATAL ERROR
	TAD LINE
	SNA CLA
	JMP ER1
	TAD (INL-REL
	JMS PRI		/"IN LINE"
	TAD LINE
	DCA PRI2
	TAD XERSNA
	DCA XPSW	/INITIALIZE SWITCH
	TAD (XDIV-REL-1
	DCA XR1		/POINTER TO POWERS OF TEN
XPL1,	TAD I XR1
	SMA
	JMP ER1		/LIST ENDED WITH NEGATIVE NUMBER
	DCA PRI
	DCA TEMP
	TAD PRI2
	CLL
	TAD PRI		/DIVIDE BY A POWER OF TEN
	SNL
	JMP .+3
	ISZ TEMP	/ADD ONE TO QUOTIENT
	JMP .-5		/CONTINUE
	CIA
	TAD PRI
	CIA
	DCA PRI2
	TAD TEMP
XPSW,	HLT		/EITHER SKP OR SNA
XPSW2,	JMP XPL1	/IF LEADING ZERO,EITHER IGNORE OR TYPE SPACE
	TAD (260	/MAKE ASCII CODE FOR DIGIT
	TYPE			/AND TYPE IT
	TAD XERSKP
	DCA XPSW	/SINCE THIS WAS A DIGIT,NEXT ZERO IS NOT
	JMP XPL1	/LEADING.

PRI2,	0		/TYPE OUT ONE 6 BIT CHAR
QX200,	AND QX77
XERSNA,	SNA
	JMP PRIEXT	/DONE
	TAD (-37
	SPA
	TAD (337-237
	TAD (237	/ADJUST ASCII
	TYPE
	JMP I PRI2

OLDEV,	0

	PAGE
XKLG2,	JMS I XXCRLF
	TAD XKSF
	DCA I XCHCK
	TAD I XOLDEV
	DCA ODEV
	TAD I KXERR
	TAD KEXXCH
	SPA CLA
	JMP .+6
	CDF 10		/IS MONITOR IN CORE?
	IAC
	TAD I ZZBUF
	CDF
	SNA CLA
ERET1,	JMP .+4
	CIF 10
	JMS I ZZ200	/KICK MONITOR OUT BEFORE RETURNING
	11
	JMP XER10
	ISZ RSW
	TAD I RSW
	SKP
XER10,	TAD ZZSTOP
	JMP I ZZXER	/READ 4 PAGES BACK IN AND CONTINUE

XKSF,	KSF
XCHCK,	CHCK+1
KEXXCH,	EXXCHN-REL^7777
XOLDEV,	OLDEV
XXCRLF,	CRLF
KXERR,	XERROR
ZZSTOP,	STOP
ZZXER,	XERRX-3
LMBUF,	BUFBEG+1^7777
KBASE,	XER-REL+377&7400%400+BASE-1
LBLK,	BLK
LXERRX,	XERRX+1
KXER2,	XER2-REL
KDASH,	DASH
K7,	7
KXKLG2,	XKLG2
PRIEXT,	JMP I PRI	/OFF PAGE EXIT KLUDGE
XPRI2,	PRI2-REL	/NO LITS ON THIS PAGE!!
ZZ200,	200
ZZBUF,	BUFBEG

ER1,	CDF 10
	TAD I K12
	SMA CLA
	JMP XKLG1
	CDF
	TAD KDASH
	JMS PRI
	CDF 10
	TAD K7
	JMS PRI
XKLG1,	CDF
	TAD KBASE
	TAD I LBLK
	DCA I LXERRX
	JMP I KXKLG2

XRCHAIN,CMA
	DCA XR1		/RESTORE LOCATIONS 10000-10022
	CML CLL RTR	/FOR ERRORS WHICH CAME FROM CHAIN PROCESSOR
	DCA XR2
	TAD LMBUF
	DCA PRI
	CDF 10
	TAD I XR2
	DCA I XR1
	ISZ PRI
	JMP .-3
	CDF
	JMP I KXER2

PRI,	0		/MESSAGE PRINTOUT
	DCA T2
PRI1,	TAD I T2	/GET FIRST TWO LETTERS
	RTR CLL
	RTR
	RTR
	JMS I XPRI2	/PRINT FIRST LETTER
	TAD I T2	/AND SECOND LETTER
	JMS I XPRI2
	ISZ T2
	JMP PRI1	/CONTINUE UNTIL ZERO CHAR

XDIV,	6030		/POWERS OF 10
	7634
	7766
	7777
	0000

/SORT LIST FOR ERROR PROCESSOR

ELIST,	-ZNAV+ZREL-1;	QFIL2-REL
	-ZNFND+ZREL-1;	QNFND-REL
	-ZILL+ZREL-1;	QNONB-REL&3777
ECHAIN,	-QOUTS+ZREL-1;	QOUT1-REL
	-ZDEVER+ZREL-1;	QFATAL-REL&3777
	-QSCR+ZREL-1;	QNONB-REL&3777
	-LNF1+ZREL-1;	QLNF-REL&3777
	-LNF+ZREL-1;	QLNF-REL&3777
EXXCHN,	-MIDERR-1;	QMIDER-REL
	-DNTBIN+OREL-1;	QNTBIN-REL
	-DMFULL+OREL-1;	QDF1-REL
	-DBDLEN+OREL-1;	QBDLEN-REL
	-STEP0-1;	QSTEP0
	-NXTFOR-1;	QNXTFR
	-QPUSH-1;	QOUT1-REL
	-TYPER-1;	QTYP-REL&3777
	-SUBERR-1;	QSUB11-REL
	-ZNFND+ZREL-1;	QNFND-REL
	-TABERR-1;	QFUNCT-REL
	-POS-2;		QFUNCT-REL
	-POSERR-1;	QNOT12-REL
	-QUOERR-1;	QQUOTE-REL&3777
	-FLDIV-2;	QDIV1-REL
	FLPAGE=FLDIV&7600
	FXDIV&177+FLPAGE+2^7777;	QDIV1-REL
	-RFINAL+2;	QFUNCT-REL
	-SER-1;		QFUNCT-REL
	-FTANER-1;	QTAN-REL
	-FLER-1;	QZER-REL
	-SQRER-1;	MSQRT1-REL&3777
	-FEXPER-1;	QFUNCT-REL
	-LOGER-1;	QLOG1-REL
	-QNOT-1;	QNOT11-REL
	-QDEV1-1;	QFATAL-REL	/READ ERROR FOR DATA
	-QRET-1;	QRET1-REL
	-QCL-1;		QCL1-REL&3777
	-QEOF-1;	QEOF1-REL
	-QFAT-1;	QFATAL-REL	/READ ERROR ON FILE
	-STROVR-2;	STRO1-REL&3777
	-QFIL1+OREL-1;	QFIL2-REL
	-QNOR1+OREL-1;	QOUT1-REL
	-QOP+OREL-1;	QOP1-REL
	-QOUT+OREL-1;	QOUT1-REL
	-QLOOK+OREL-1;	QNFND-REL
	-QENT+OREL-1;	QOPN-REL
	-QNOT1-1;	QNOT12-REL
	-QDF-1;		QDF1-REL
	-QDEV2-1;	QFATAL-REL&3777	/ERROR WRITING FILE
	-QRNG-1;	QRNG11-REL
	0;		QUNDF-REL	/UNDEFINED ERROR

DASH,	TEXT	/ - /
QMIDER,	TEXT /MID ERROR/
QNTBIN,	TEXT /NOT A BINARY FILE/
QBDLEN,	TEXT /ARRAY OF WRONG SIZE/
QSTEP0,	TEXT /STEP OF 0/
QNXTFR,	TEXT /NEXT WITHOUT FOR/
QNONB,	TEXT /BAD FILE FOR CHAIN/;	STOP2
QLNF,	TEXT /LINE NOT FOUND/;		STOP2
QTYP,	TEXT /BAD INPUT/;		INP3
QNFND,	TEXT /FILE NOT FOUND/
QFUNCT,	TEXT /FUNCTION ARG TOO BIG/
QQUOTE,	TEXT /NO CLOSING QUOTE/;	XDEL2
QZER,	TEXT /ZERO TO ZERO POWER/
QTAN,	TEXT "TAN OF PI/2"
QUNDF,	TEXT /UNDEFINED ERROR/
OOD,	TEXT /OUT OF DATA/
QNOT11,	TEXT /CHANNEL NOT OPEN FOR INPUT/
QRET1,	TEXT /RETURN WITHOUT GOSUB/
QCL1,	TEXT /ERROR CLOSING FILE/;	STOP2
QSUB11,	TEXT /SUBSCRIPT OUT OF BOUNDS/
QLOG1,	TEXT /NEGATIVE OR ZERO LOG/
QDIV1,	TEXT /DIVISION BY ZERO/
MSQRT1,	TEXT /SQR OF NEGATIVE ARG/;FSQT
QEOF1,	TEXT /END OF FILE/
QFATAL,	TEXT /DEVICE ERROR/;		STOP2
STRO1,	TEXT /STRING OVERFLOW/;		STROVR+2
QFIL2,	TEXT /DEVICE NOT AVAILABLE/
QOP1,	TEXT /FILE ALREADY OPEN/
QOUT1,	TEXT /OUT OF STORAGE/
QOPN,	TEXT /CAN'T OPEN OUTPUT FILE/
QNOT12,	TEXT /CHANNEL NOT OPEN FOR OUTPUT/
QDF1,	TEXT /DEVICE FULL/
QRNG11,	TEXT /CHANNEL OUT OF RANGE/
INL,	TEXT / IN LINE /
	ERREND=.

/CHAIN PROCESSOR

	*6400
	ZREL=.-4400	/RELOCATED TO 4400
K7600,	7600

        IFDEF DEBUG <
	LAS
	SMA CLA
	HLT             /TO ALLOW DEBUGGING IN ODT>

	TAD I MOVE
	DCA ZLD1
	TAD I ZFNCX
	DCA ZLD1+1	/GET DEV: NAME
	IAC
	DCA I ZLEN
	CMA
	DCA XR1
	CML CLL RTR
	DCA XR2
	TAD (-17
	JMS MOVE
	CIF 10
	JMS I (7700
	10		/GET MONITOR
	DCA I ZLEN
	TAD (7646	/SAVE 'DEVICE-HANDLER-IN-CORE' TABLE
	DCA XR1
	CLA CML CLL RAR	/INTO 4000 (APPROXIMATLY)
	DCA XR2
	JMS MOVE
	CIF 10
	JMS I K200
	1		/FETCH HNDLR
ZLD1,	0		/FIRST WD OF NAME
K203,	203		/SECOND WD OF NAME & NUMBER
	4001		/LOADING PG & ENTRY
ZNAV,	 ERROR		/DEVICE NOT AVAIABLE
	TAD ZLD1+1	/DEV #
ZLOOK,	CIF 10
	JMS I K200
	2		/LOOKUP NAME
	0		/NAME - STBLK
ZLEN,	7746		/LENGTH
	JMP ZNF		/FILE NOT FOUND
	TAD ZLOOK+3
	DCA I (ZBLK-ZREL
	TAD ZLEN
	CIA
	DCA LINK
	TAD LINK
	DCA ZLEN
	CML CLL RTR
	DCA XR1
	CMA
	DCA XR2
	TAD (-17
	JMS MOVE
	CLA CML CLL RAR	/RESTORE 'DEVICE-HANDLER-IN-CORE' TABLE
	DCA XR1
	TAD (7646
	DCA XR2
	JMS MOVE	/NOW THE MONITOR DOESN'T KNOW ABOUT THE CHAIN HANDLER
	TAD (-4
	DCA TEMP
	TAD (BCHANL
	DCA AC2
	DCA ACX
ZGOLUP,	TAD I AC2
	SZA CLA
	ISZ ACX
	TAD AC2
	TAD (16
	DCA AC2
	ISZ TEMP
	JMP ZGOLUP
	TAD INHNDL
	AND K200	/DETERMINE WETHER OR NOT TO WRITE OUT
	RAR CLL CML
	TAD K200	/PAGE 7400
	DCA ZFNCX
	TAD INHNDL
	AND K7600
	CIA
	TAD PPNT
	CDF 10
	SNA CLA
	JMP I (NOSVE-ZREL
	CDF
	JMS I (7607
ZFNCX,	LD1-OREL+1
	7000		/WRITE OUT THE DEVICE HANDLERS NOW IN CORE
	27		/ONTO THE SYSTEM SCRATCH BLOCKS (USR AREA)
	JMP I (ZDEVER-ZREL
ZGOXX,	TAD (BCHANL-1	/NOW MOVE THE FILES AREA INTO
	DCA XR1		/PAGE 7200
	TAD (7700	/LENGTH OF 'BCHANL'
	DCA PTR
	TAD (7177
	DCA XR2
	TAD (ZKLG3-ZREL
	DCA MOVE
	JMP MOVE+4

ZNF,	ISZ TABSW
ZNFND,	 ERROR		/FILE NOT FOUND
	TAD (0201	/TRY .BA IF NO EXTENSION SPECIFIED
	DCA NAM+3
	JMP ZLOOK-1

MOVE,	LD1-OREL
	TAD (-17
	DCA PTR
	CDF 10
	TAD I XR1
	DCA I XR2
	ISZ PTR
	JMP .-3
	CDF
	JMP I MOVE

	PAGE
ZKLG3,	TAD I (ZLD1-ZREL+2
	DCA INCORE
	JMS I (ZREAD-ZREL	/READ FIRST BLOCK
	TAD (BUFBEG		/START OF BUFFER
	DCA PAC
	TAD 5600+BUFBEG	/COMPILED FILE?
	IAC
	SNA CLA		/NON-ZERO=NOPE.
	TAD 5606	/DATA?
	SNA CLA
	TAD ZCBUF	/NO,START FILE BUFFERS AT 7245
	TAD (6645	/ELSE AT 6645
	DCA AC1
	TAD ACX
	SNA CLA
	JMP ZDETRM	/NO FILE,NO BOTHER
	TAD K7200
	DCA TEMP
	TAD (177
	DCA XR2
	TAD (-4
	DCA OP1
GONXT,	TAD I TEMP
	RTL
	CLA RTL CML
	IAC
	TAD TEMP
	DCA OP2
	TAD I TEMP
	SZA CLA
	JMP ITSOPN	/IT'S AN OPEN FILE TO BE KEPT OPEN!
	DCA I OP2	/ZERO BUFFER ADDR IF ANY
GONXT2,	TAD TEMP
	TAD (16
	DCA TEMP
	ISZ OP1
	JMP GONXT
	TAD ACX
	CIA
	DCA TEMP
	TAD (177
	DCA XR1
	TAD AC1
	DCA OP2
LUP,	CMA
	TAD OP2
	DCA XR2
	TAD (-400+17
	JMS I (MOVE-ZREL
	TAD KM400
	TAD OP2
	DCA OP2
LUPX,	ISZ TEMP
	JMP LUP
ZDETRM,	TAD ACX
	CDF 10
	DCA I (21
	CDF
	DCA STOP2-1	/DON'T TRY TO CLOSE FILES ON ERROR ANY MORE!
	TAD BUFBEG+5600
	IAC		/IS IT A COMPILED PROG?
	SNA CLA
	JMP I (ZKLG4-ZREL

ZCOMPA,	TAD ACX
	SNA
	JMP I (ZCOMP-ZREL
	RTR CLL
	RTR
	RAR
	RAR CML
	TAD ZFNC
	DCA ZFNC
	TAD OP2
	TAD ZCBUF
	DCA ZCBUF
	JMS I (7607
ZFNC,	10
ZCBUF,	400
	31
	JMP I (ZDEVER-ZREL
	JMS I (7607
	4100
K7200,	7200
	33
	JMP I (ZDEVER-ZREL
	JMP I (ZCOMP-ZREL

ITSOPN,	TAD I OP2
	TAD (-245
	AND K7400
	TAD (244
	DCA XR1
	TAD XR1
	CMA
	TAD I OP2
	DCA RNDCHN
	TAD XR2
	TAD (-177
	CIA
	TAD RNDCHN
	TAD AC1
	DCA I OP2
	TAD (-400+17
	JMS I (MOVE-ZREL
	JMP GONXT2

	PAGE

ZKLG2,	TAD 5606	/ANY DATA?
	SNA
	JMP ZKLG	/NO,BACK TO WHERE WE CAME FROM
	CIA
	TAD I (ZLEN-ZREL	/YES,SHORTEN UP THE FILE BY
	DCA LINK	/THE NUMBER OF DATA BLOCKS
	TAD LINK	/FIND OUT THE STARTING BLOCK
	TAD I (ZBLK-ZREL
	DCA ZBLK2	/SAVE IT
	CMA		/IS THIS THE ONLY BLOCK?
	TAD 5606
	SNA CLA
	TAD (7045	/YES,LOAD IT DIRECTLY WHERE IT BELONGS
	TAD ZX200
	DCA ZKFUNC+1	/ELSE DOWN AT THE BOTTOM OF THE FIELD
	TAD 5606	/# OF RECORDS AGAIN
	RTL CLL
	RTL CLL		/TRANSFORM IT INTO A CONTROL WORD
	RTL CLL
	RAL
	TAD (10		/FIELD 1,OF COURSE
	DCA ZKFUNC	/STASH IT
	JMS I INCORE	/GO GET HIS DATA
ZKFUNC,	0
ZX200,	200
ZBLK2,	0
	JMP I (ZDEVER-ZREL	/DEVICE ERROR!!!
	CMA
	TAD 5606	/LAST BLOCK?
	SNA CLA		/ACTUALLY 'ONLY BLOCK?'
	JMP ZKLG	/YES
	CLA CML CLL RAR	/CHANGE THE READ FUNCTION
	TAD ZKFUNC	/INTO A WRITE FUNCTION
	DCA ZKFNC2
	JMS I (7607	/WRITE IT INTO THE SYSTEM SCRATCH BLOCK
ZKFNC2,	0
	200
	40
	JMP I (ZDEVER-ZREL	/DEVICE ERROR AGAIN!!
	TAD (7244
	DCA XR1
	TAD (177
	DCA XR2		/TRANSFER THE FIRST BLOCK INTO
	TAD KM400	/ITS VERY OWN BUFFER
	DCA FXR
	CDF 10		/UP THERE,AGAIN
	TAD I XR2
	DCA I XR1
	ISZ FXR
	JMP .-3
	CDF		/ALL DONE!
ZKLG,	TAD 20+5600	/YES
	CIA
	DCA LENTMP	/NUMBER OF WORDS TO BE TRANSFERED
	TAD (6
	DCA FXR		/FIELD 1 PNTR
	CDF
	JMS I (ZGET-ZREL
	CDF 10
	DCA I FXR
	ISZ LENTMP
	JMP .-5
	TAD I (BUFBEG+1	/POINTER TO 'END' STATEMENT
	TAD (BUFBEG-1
	DCA LENTMP
	TAD I LENTMP
	TAD (-47
	SZA CLA
QSCR,	 ERROR		/BAD CORE IMMAGE
ZEND,	TAD (BUFBEG+1
	DCA PAC
	TAD ADDR
	SNA		/STARTING LINE GIVEN?
	JMP LFND+1	/NO
	CIA
	DCA ADDR
	DCA I (0	/FOIL THE 'STOP AT LINE 4005' SYNDROME
LTRY,	TAD I PAC
	TAD ADDR
	SNA CLA
	JMP LFND	/START FOUND
	ISZ PAC
	TAD I PAC
	RTR CLL
	RTR
	RAR
	AND (177	/LENGTH OF LINE
	TAD PAC
	DCA PAC
	TAD PAC
	CIA CLL
	TAD LENTMP
	SNL CLA
LNF,	 ERROR		/LINE NOT FOUND
	JMP LTRY



LFND,	CMA
	TAD PAC
	DCA I (17
	CDF
	TAD (3500	/RUN SEGMENT IS LONGER THAN COMPILE
	DCA I (STOP2+1
	TAD (BASE		/LENGTH OF EDIT,TM.TM,COMPIL
	TAD I (BLK
	DCA I (BLK
	JMP I (ZDNE2-ZREL

	PAGE
ZCOMP,	TAD (-1400-1
	DCA I (GCNT-ZREL
	TAD (5600
	DCA I (GPNT-ZREL
	TAD ADDR
	SNA CLA
	IAC
	DCA LENTMP
ZDEC,	DCA RELOP	/GET RELOP NUMBER
	JMS I (ZUN-ZREL		/GET CHAR
	TAD (-240
        SZA
        TAD (240-215
	SNA CLA
	JMP .-5		/IGNORE LEADING SPACES
	TAD CHAR
	JMP .+3
ZDEC3,	DCA RELOP
	JMS I (ZUN-ZREL
	TAD (-260
	CLL
	TAD (-12
	SZL
	JMP ZOUT
	TAD K12
	DCA BUFFER
	TAD RELOP
	SPA
	JMP ZILL
	RTL CLL
	SNL
	TAD RELOP
	SNL
	RAL CLL
	SNL
	TAD BUFFER
	SNL
	JMP ZDEC3
ZILL,	 ERROR		/ILLEGAL RELOP NUMBER

ZOUT,	CLA
	TAD RELOP
	SZA
	IAC
	SNA CLA
	JMP ZILL	/AS IS 7777
	TAD RELOP
	CDF 10
	DCA I PAC
	TAD I PAC
	CIA
	TAD ADDR
	SNA CLA
	ISZ LENTMP	/SAVE PACKWD
	ISZ PAC
	DCA I PAC	/LENGTH WD
	CDF
	TAD PAC
	DCA WORD	/LENGTH WD
	ISZ PAC
	TAD CHAR
	TAD (-240
	SNA CLA
ZNXT,	JMS I (ZUN-ZREL
	CLA
	ISZ ZJMP
ZJMP,	JMP .
	JMP ZCHAR1
	JMP ZCHAR2
	CDF 10
	TAD CHAR
	CLL RTL
	RTL
	AND K7400
	TAD I RSW
	DCA I RSW
	TAD CHAR
	CLL RTR
	RAR
	RTR
	AND K7400
	TAD I PAC
	DCA I PAC
	TAD (JMP ZJMP
	DCA ZJMP
	ISZ PAC
	JMP ZEXT
ZCHAR2,	TAD PAC
	DCA RSW
	ISZ PAC
ZCHAR1,	CDF 10
	TAD CHAR
	DCA I PAC
ZEXT,	CDF
	TAD CHAR
	TAD KM215
	SZA CLA
	JMP ZNXT	/GET NEXT CHAR
	TAD ZJMP
	TAD (ZJMP&177+5200^7777
	SZA CLA
	ISZ PAC		/ROUND UP ON CR
	TAD (JMP ZJMP
	DCA ZJMP
	TAD WORD
	CIA		/CALCULATE LENGTH OF RELOP
	TAD PAC
	CDF 10
	DCA I WORD
	CDF
	JMP ZDEC	/GET NEXT RELOP

NOSVE,	CLL CML RAR
	TAD I (21
	DCA I (21
	CDF
	JMP I (ZKLG3-ZREL

	PAGE
K177,	177		/SCUNGE A WORD
ZGET,	0		/GET ONE WD FROM BUFFER
	ISZ GCNT
	JMP GET2
	TAD K5600
	DCA GPNT	/RESET UNPACK PNTR
	TAD ZBLK
	TAD K3
	DCA ZBLK
	TAD (-1400
	DCA GCNT
	JMS ZREAD
GET2,	TAD I GPNT
	ISZ GPNT
	JMP I ZGET

ZREAD,	0		/SUB TO READ 1 BUFFER (2K)
	CLA CLL CMA RTL
	TAD LINK	/LENGTH OF FILE
	SPA
	JMP ZLST
	DCA LINK
	TAD (600
	DCA ZFUNCT
	JMS I INCORE
ZFUNCT,	0
K5600,	5600		/CORE
ZBLK,	0
ZDEVER,	 ERROR
	JMP I ZREAD

ZLST,	TAD K3
	RTR CLL
	RTR
	RTR
	JMP ZFUNCT-2

GCNT,	-1400+6
GPNT,	5607

ZUN,	0		/UNPACK A CHAR
	JMP I ZICH

ZICHR1,	JMS ZGET
	DCA TEMP
	TAD TEMP
	JMS ZICH

	TAD TEMP	/SECOND CHAR
	AND K7400
	DCA TEMP	/SAVE UPPER 4 BITS OF 3RD CHAR
	JMS ZGET
	DCA T2
	TAD T2
	JMS ZICH

	TAD T2		/THIRD CHAR
	AND K7400
	CLL RTR; RTR
	TAD TEMP
	RTR; RTR
	JMS ZICH
	JMP ZICHR1

ZICH,	ZICHR1-ZREL
KK200,	AND K177
	TAD KK200
	DCA CHAR
	TAD CHAR
	TAD (-200
	SNA
	JMP I ZICH	/IGNORE NULLS
	TAD (200-212
	SNA
	JMP I ZICH
	TAD (212-232
	SNA CLA
	JMP ZDNE	/^Z
	TAD CHAR
	JMP I ZUN

ZDNE,	TAD PAC
	CDF 10
	DCA I (2
	TAD LENTMP
	SNA CLA
LNF1,	 ERROR
	TAD ADDR
	DCA I (4
	CDF
	TAD I (BLK
	TAD (CBASE	/NUMBER OF BLOCKS TO COMPILER
	DCA I (BLK
ZDNE2,	CDF 10
	CLL CML CLA RAR
	DCA I K12
	TAD (6
	DCA FXR
	TAD NAM
	DCA I FXR
	TAD NAM+1
	DCA I FXR
	TAD NAM+2
	DCA I FXR
	CDF
	JMP I (STOP2	/READ COMPILE OVER OURSELVES

ZKLG4,	TAD ACX
	DCA 5621
	TAD OP2
	TAD (400
	CLL CMA CML
	TAD 5620
	SNL CLA		/PROGRAM OVERWRITES FILE BUFFERS!
	TAD ACX
	SZA CLA
QOUTS,	 ERROR
	JMP I (ZKLG2-ZREL

	PAGE
/OPEN STATEMENT HANDLER
/LOADS AND EXECUTES AT PAGE 5000, FIELD 0

/OPEN <DEV:NAME> <FOR IN/OUTPUT> AS FILE I

/INFORMATION IN CHANNEL:

/ READ/WRITE/BIN, DEV#
/ CHARACTER POSITION IN LINE
/ -CHARS TO FILL BUFFER
/ BUFFER POINTER
/ ICHLV / OUJMPE
/ ENTRY OF HNDLER
/ CURRENT BLCOK NUMBER
/ MAX BLOCKS IN FILE
/ BLOCKS USED
/ NAME 1
/ NAME 2
/ NAME 3
/ EXTENSION

	*3000
	OREL=.-FSIN
OPEN,	CDF 10
	TAD I PACKWD
	CDF
	DCA OINP
	IAC
	TAD OINP
	SNA CLA		/IS IT A RANDOM ACCESS FILE?
	TAD (0222-0401	/YES - .BR IS DEFAULT EXTENSION
	TAD (0401	/NO - .DA IS DEFAULT EXTENSION
	JMS OPENS
	EVAL		/CHANNEL NUMBER
	FIXAC1
	CMA
	JMS OCHECK
	CIF 10
	JMS I (7700	/GET MONITOR
	10
	TAD CHANL
	TAD (11
	DCA XR1
	TAD NAM
	DCA I XR1
	TAD NAM+1
	DCA I XR1
	TAD NAM+2
	DCA I XR1
	TAD NAM+3
	DCA I XR1
	JMP I (EONAME-OREL

OPENS,	0
	DCA EXT
	EVAL
	TAD (1300
	DCA NULLS
	TAD (0423	/"DSK:" IS DEFAULT
	DCA I (LD1-OREL
	TAD (1300
	DCA I (LD1-OREL+1
GETNAM,	DCA NAM
	DCA NAM+1
	DCA NAM+2
	TAD EXT
	DCA NAM+3
	DCA PAC
	CMA
	DCA PACNT	/ONLY ONE PROD IN NAME
GTNMX,	DCA FTEMP
	UNPACK
	JMP I OPENS
	TAD (-240
	SNA
	JMP .-3
	TAD (240
	DCA CHAR
	TAD CHAR
	TAD (-256
	SNA
	JMP PROD
	TAD (256-":
	SNA
	JMP LDEV	/GET DEVICE HNDLER
	TAD K12
	CLL
	TAD (-12
	SNL CLA
	JMP INSERT
	TAD (-301
	TAD CHAR
	CLL CML
	TAD (-32
	SNL CLA
	JMP I OPENS	/TERMINATOR
INSERT,	TAD FTEMP
	TAD (-6
	SMA CLA
	JMP GTNMX+1	/MORE THAN 6 LETTERS - IGNORE
	TAD FTEMP
	CLL RAR
	TAD PAC		/PNTR + # OF LETTERS/2
	DCA TEMP	/=ADDR
	TAD CHAR
	AND (77
	SZL
	JMP .+4
	RTL; RTL; RTL
	TAD I TEMP
	DCA I TEMP
	ISZ FTEMP	/ONE MORE LETTER
	JMP GTNMX+1

PROD,	ISZ PACNT
	JMP I OPENS	/SECOND .
	ISZ PAC
	DCA NAM+3	/KILL DEFAULT EXTENSION
	TAD (4
	JMP GTNMX

LDEV,	TAD NAM		/TRANSFER DEV NAME
	DCA I (LD1-OREL
	TAD NAM+1
	DCA NULLS
	TAD NAM+1
	JMP GETNAM-1	/GET FILE NAME

EXT,	0

	PAGE
KX7600,	7600
/ROUTINE TO GET HANDLER, LOOKUP NAME ETC.

GDEVNO,	0
	DCA OPX
	TAD WARSAW	/ROOM FOR HNDLER?
	CIA CLL
	TAD I (PPNT
	SNL CLA
	TAD ELEV	/NO ROOM - ASCERTAIN INSTEAD
	IAC		/ROOM - CALL HNDLER
	DCA LD1-1
	TAD NULLS
	DCA LD1+1
	TAD I (PPNT	/PNTR TO PAGE
	TAD OPX
	DCA LD1+2
	CIF 10
	JMS I KX200
	1		/CALL HNDLER
LD1,	0		/FIRST WD OF NAME
	0		/SECOND WD OF NAME
	0		/LOADING PAGE & ENTRY
	JMP QCHKX
	TAD LD1+2
	SNA
QNOR1,	 ERROR		/NO ROOM FOR HNDLR
KX200,	AND KX7600
	CIA
	TAD I (PPNT
	SNA CLA
	TAD KX7600
	TAD I (PPNT
	DCA I (PPNT
	JMP I GDEVNO

EONAME,	JMS GDEVNO
	TAD CHANL
	DCA XR2
	TAD I CHANL
	SZA CLA
QOP,	 ERROR		/ALREADY OPEN
	STL
	ISZ OINP
	RAR
	ISZ OINP
	RTR
	TAD LD1+1	/DEV #
	DCA I XR2
	TAD OINP
	SMA SZA CLA	/DON'T ENTER CHAR COUNT AND -CHARS FOR
	JMP .+5		/RANDOM ACCESS FILES.
	IAC
	DCA I CHANL	/CHAR COUNT OF LINE
	TAD (-600
	DCA I CHANL	/- # OF CHARS
	TAD CHANL
	DCA XR2
	TAD I CHANL
	SZA
	JMP LBSKP	/CLOSED FILE
	TAD I (MAXBUF
	TAD KM400
	DCA I (MAXBUF
	TAD I (MAXBUF
	CIA CLL
	TAD I (OSTART
	SZL CLA
QOUT,	 ERROR		/OUT OF ROOM
	TAD I (MAXBUF
LBSKP,	TAD (-245
	AND K7400
	TAD (245
	DCA I XR2
	TAD OINP
	SMA SZA CLA	/DON'T ENTER OUJMP OR ICHLV FOR
	JMP .+6		/RANDOM ACCESS FILES.
	TAD OINP
	SNA CLA
	TAD (OUJMP&177+5200-INSTRT
	TAD (INSTRT
	DCA I CHANL
	TAD LD1+2	/ENTRY POINT
	DCA I CHANL
	TAD OINP
	SNA CLA
OBENT,	STL RAR		/OUTPUT - ENTER FILE NAME
	STL RTL		/INPUT	- LOOKUP NAME
	DCA LOOK1-1
	DCA LOOK1	/PNTR TO NAME
	TAD LD1+1	/DEV #
	CIF 10
	JMS I KX200
	0		/EITHER 2 OR 3
LOOK1,	0		/STBLK - POINTER TO NAME
	0		/LENGTH
	JMP I (OBIN-OREL	/CHECK FOR BIN FILE
	TAD LOOK1
	DCA I CHANL	/STARTING BLOCK
	TAD LOOK1+1
	DCA I CHANL	/LENGTH
	TAD OINP	/NEED TO CLOSE BIN FILE FIRST?
	CMA CLL CML RAL
	TAD LOOK1-1
	SNA CLA
	CMA		/YES
	DCA I CHANL	/BLOCKS USED
	CIF 10
	JMS I KX200
ELEV,	11		/KICKOUT MONITOR
	NEXT		/DONE!!


QCHKX,	TAD LD1+2
	RAR
	SZL CLA
QFIL1,	 ERROR
	TAD PPNT
	TAD KX7600
	DCA PPNT
	ISZ OPX
	JMP GDEVNO+2

	PAGE
	/DIM #N STATEMENT HANDLER
	/CHECKS TO SEE IF FILE HAS BEEN OPENED
	/IF IT IS A NEWLY CREATED FILE, IT CHECKS
	/TO SEE IF HOLE IS LONG ENOUGH, AND GIVE
	/"DEVICE FULL" ERROR IF IT IS NOT
	/IF IT IS AN OLD FILE, IT CHECKS TO SEE IF THE
	/REQUESTED SIZE IS THE SAME AS THE REAL SIZE
	/AND GIVES AN ERROR IF IT IS NOT
	/REPEATED DIM #'S OF THE SAME SLOT ACT AS
	/AN EQUIVALENCE OF THE ARRAYS ON THE FILE.
	/THIS IS ESPECIALLY HANDY AFTER A CHAIN
	/(THINK A MOMENT)


DIMNUM,	EVAL		/GET THE FILE NUMBER
	FIXAC1
KX12,	12
	CDF 10
	DCA I PACKWD	/SAVE IT FOR LATER
	TAD I PACKWD	/GET # OF RECORDS NEEDED
	DCA DIMTMP
	CDF
	TAD AC1		/GET FILE # BACK
	JMS OCHECK	/SET UP CHANL
	TAD CHANL
	DCA FXR		/WE'LL NEED IT LATER
	TAD CHANL
	TAD KX12
	DCA DIMNAM	/SET UP POINTER FOR CLOSE
	TAD I CHANL
	RAL CLL		/BINARY FILE?
KX7700,	SMA CLA
DNTBIN,	 ERROR		/GIVE HIM HELL
	TAD CHANL
	TAD KXX4
	DCA XR1		/POINTS TO CLOSE SWITCH
	TAD FXR
	TAD FXX4
	DCA XR2		/POINTS TO REAL OR MAX LEN
	TAD I DIMNAM	/HAVE WE DONE THIS STUFF BEFORE
	SNA CLA
	JMP FAROUT	/YESSIREE!!!
	DCA I DIMNAM	/DON'T DO THIS CODE AGAIN!
	ISZ DIMNAM
	TAD I XR2	/SAVE THE LENGTH OF THE FILE
	DCA I DIMNAM	/FOR THE 'EQUIVALENCE' FEATURE
	ISZ I XR1	/NEED TO CLOSE?
	JMP DNTCLS	/NOPE, TAKE THE EASY EXIT
	TAD DIMTMP
	TAD I DIMNAM	/HOLE LONG ENOUGH?
	SZL CLA
DMFULL,	 ERROR		/TOUGH
	TAD DIMTMP
	CIA
	DCA I DIMNAM
	TAD DIMTMP
	DCA DIMLEN	/SET UP FOR PS/8 CLOSE
	TAD I FXR
	AND K17		/GET A CLEAN DEVICE #
	CIF 10
	JMS I KX7700	/LET THE USR DO THE WORK
FXX4,	4		/CLOSE FUNCTION
DIMNAM,	0
DIMLEN,	0
	HLT		/BAD NEWS
DIMN2,	TAD CHANL
	TAD K3
	DCA XR1
	CMA
	DCA I XR1	/IMPOSSIBLY LARGE BLOCK
	DCA I XR1	/WHICH HASN'T BEEN WRITTEN IN YET
	NEXT		/ALL DONE

DNTCLS,	TAD I DIMNAM
	TAD DIMTMP
	SMA SZA CLA
DBDLEN,	 ERROR
	JMP DIMN2

DIMTMP,	0

CHAINB,	CMA
	JMS I (OPENS-OREL
	TAD WORD
	AND K200
	SNA CLA		/IS THERE A LINE NUMBER?
	JMP .+4		/NO
	EVAL
	FIXAC1
	CMA CLL
	DCA ADDR
	TAD NAM+3
	DCA TABSW
	TAD NAM+3
	IAC
	SZA CLA
	JMP .+3
	TAD (203
	DCA NAM+3
	TAD (ERRLEN
	JMP I (CHAIN2

KILL,	TAD (401
	JMS I (OPENS-OREL
	CIF 10
	JMS I KX7700
	10
	JMS I (GDEVNO-OREL
	TAD I (LD1+1-OREL
	CIF 10
	JMS I K200
KXX4,	4
	NAM
	0
	NOP		/NOBODY CARES IF ITS THERE!
	CIF 10
	JMS I K200
	11
	NEXT

FAROUT,	ISZ DIMNAM	/BUMP DOWN TO LENGTH
	TAD I DIMNAM
	TAD DIMTMP	/MAKE SURE HE'S NOT TRYING TO PULL
	SMA SZA CLA		/A FAST ONE ON US.
	JMP DBDLEN
	NEXT

OBIN,	TAD OINP
	CMA
	TAD I (LOOK1-OREL-1
	SNA CLA		/BIN FILE?
	JMP I (OBENT-OREL	/YES, ENTER FILE
	CIF 10
	JMS I K200
	11
	ISZ OINP
QENT,	 ERROR		/CAN'T OPEN OUTPUT FILE
QLOOK,	 ERROR

	OPNEND=.
	$

